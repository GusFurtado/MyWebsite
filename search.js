window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "DadosAbertosBrasil", "modulename": "DadosAbertosBrasil", "qualname": "", "type": "module", "doc": "<p>Dados Abertos Brasil \u00e9 uma iniciativa para facilitar o acesso a dados\nabertos e APIs do governo brasileiro.</p>\n\n<p>\u00c9 um pacote open-source para Python e Pandas e a forma mais simples de acessar\ndados de institui\u00e7\u00f5es como IGBE, IPEA, Banco Central, etc.</p>\n\n<h2 id=\"modulos-em-desenvolvimento\">M\u00f3dulos em Desenvolvimento</h2>\n\n<pre><code>- DadosAbertosBrasil.ibge\n- DadosAbertosBrasil.ipea\n- DadosAbertosBrasil.camara\n- DadosAbertosBrasil.senado\n- DadosAbertosBrasil.bacen\n- DadosAbertosBrasil.favoritos\n- DadosAbertosBrasil.UF\n</code></pre>\n\n<h6 id=\"sobre\">Sobre</h6>\n\n<ul>\n<li>P\u00e1gina Oficial: https://www.gustavofurtado.com/dab.html</li>\n<li><p>Documenta\u00e7\u00e3o: https://www.gustavofurtado.com/DadosAbertosBrasil.html</p>\n\n<h2 id=\"instalacao\">Instala\u00e7\u00e3o</h2>\n\n<ul>\n<li>pip install DadosAbertosBrasil</li>\n</ul></li>\n</ul>\n\n<h2 id=\"dependencias\">Depend\u00eancias</h2>\n\n<pre><code>- Python 3.6 ou superior\n- pandas\n- requests\n</code></pre>\n\n<h2 id=\"licenca\">Licen\u00e7a</h2>\n\n<pre><code>- MIT\n</code></pre>\n"}, {"fullname": "DadosAbertosBrasil._ibge.cidades", "modulename": "DadosAbertosBrasil._ibge.cidades", "qualname": "", "type": "module", "doc": "<p>Subm\u00f3dulo IBGE contendo os wrappers das APIs do IBGE Cidades.</p>\n\n<p>Este subm\u00f3dulo \u00e9 importado automaticamente com o m\u00f3dulo <code>ibge</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">DadosAbertosBrasil</span> <span class=\"kn\">import</span> <span class=\"n\">ibge</span>\n</code></pre></div>\n\n<h6 id=\"references\">References</h6>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n"}, {"fullname": "DadosAbertosBrasil._ibge.cidades.Galeria", "modulename": "DadosAbertosBrasil._ibge.cidades", "qualname": "Galeria", "type": "class", "doc": "<p>Gera uma galeria de fotos da localidade desejada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>localidade</strong> (int):\nC\u00f3digo IBGE da localidade.\nO c\u00f3digo pode ser obtido com aux\u00edlio da fun\u00e7\u00e3o <code>ibge.localidades</code>.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>fotografias</strong> (list of ibge._Fotografia):\nLista de fotografias da localidade.</li>\n<li><strong>localidade</strong> (int):\nC\u00f3digo IBGE da localidade.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Capturar a primeira fotografia da galeria de Fortaleza.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fortaleza</span> <span class=\"o\">=</span> <span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">Galeria</span><span class=\"p\">(</span><span class=\"mi\">2304400</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">foto</span> <span class=\"o\">=</span> <span class=\"n\">fortaleza</span><span class=\"o\">.</span><span class=\"n\">fotografias</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<p>Gerar uma URL da fotografia com altura m\u00e1xima de 500 pixels.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">foto</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"n\">altura</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;https://servicodados.ibge.gov.br/api/v1/resize/image?maxwidth=600&amp;max...&#39;</span>\n</code></pre></div>\n\n<h6 id=\"references\">References</h6>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n"}, {"fullname": "DadosAbertosBrasil._ibge.cidades.Galeria.__init__", "modulename": "DadosAbertosBrasil._ibge.cidades", "qualname": "Galeria.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "localidade"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.cidades.Historia", "modulename": "DadosAbertosBrasil._ibge.cidades", "qualname": "Historia", "type": "class", "doc": "<p>Hist\u00f3rico de uma localidade.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>localidade</strong> (int or str):\nC\u00f3digo da localidade.\nEste c\u00f3digo pode ser obtido com aux\u00edlio da fun\u00e7\u00e3o <code>\u00ecbge.localidades</code>.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>ano</strong> (int):\nAno da publica\u00e7\u00e3o do hist\u00f3rico.</li>\n<li><strong>estado</strong> (str):\nNome do estado no formato 'Estado - UF'.</li>\n<li><strong>estado1</strong> (str):\nNome do estado sem a sigla.</li>\n<li><strong>formacao_administrativa</strong> (str):\nDescri\u00e7\u00e3o da forma\u00e7\u00e3o administrativa da localidade.</li>\n<li><strong>gentilico</strong> (str):\nGent\u00edlico dos naturais desta localidade.</li>\n<li><strong>historico</strong> (str):\nTexto descrevendo a hist\u00f3ria da localidade.</li>\n<li><strong>historico_fonte</strong> (str):\nFonte do texto do atributo <code>historico</code>.</li>\n<li><strong>localidade</strong> (int):\nC\u00f3digo da localidade.</li>\n<li><strong>municipio</strong> (str):\nNome do munic\u00edpio.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_LocalidadeError</strong>: Caso o c\u00f3digo da localidade seja inv\u00e1lido.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Capturar o hist\u00f3rico de Belo Horizonte e a fonte do texto.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bh</span> <span class=\"o\">=</span> <span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">Historia</span><span class=\"p\">(</span><span class=\"n\">localidade</span><span class=\"o\">=</span><span class=\"mi\">310620</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bh</span><span class=\"o\">.</span><span class=\"n\">historico</span>\n<span class=\"go\">&#39;Foi \u00e0 procura de ouro que, no distante 1701, o bandeirante Jo\u00e3o Leite...&#39;</span>\n</code></pre></div>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bh</span><span class=\"o\">.</span><span class=\"n\">historico_fonte</span>\n<span class=\"go\">&#39;Belo Horizonte (MG). Prefeitura. 2014. Dispon\u00edvel em: ...&#39;</span>\n</code></pre></div>\n\n<p>Capturar o hist\u00f3rico do estado de Minas Gerais</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mg</span> <span class=\"o\">=</span> <span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">Historia</span><span class=\"p\">(</span><span class=\"mi\">52</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<h6 id=\"references\">References</h6>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n"}, {"fullname": "DadosAbertosBrasil._ibge.cidades.Historia.__init__", "modulename": "DadosAbertosBrasil._ibge.cidades", "qualname": "Historia.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "localidade"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.misc", "modulename": "DadosAbertosBrasil._ibge.misc", "qualname": "", "type": "module", "doc": "<p>Subm\u00f3dulo IBGE contendo fun\u00e7\u00f5es diversas.</p>\n\n<p>Este subm\u00f3dulo \u00e9 importado automaticamente com o m\u00f3dulo <code>ibge</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">DadosAbertosBrasil</span> <span class=\"kn\">import</span> <span class=\"n\">ibge</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil._ibge.misc.populacao", "modulename": "DadosAbertosBrasil._ibge.misc", "qualname": "populacao", "type": "function", "doc": "<p>Obt\u00e9m a projecao da popula\u00e7\u00e3o referente ao Brasil.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>projecao</strong> ({'populacao', 'nascimento', 'obito', 'incremento'}, optional):\n<ul>\n<li>'populacao' obt\u00e9m o valor projetado da popula\u00e7\u00e3o total da localidade;</li>\n<li>'nascimento' obt\u00e9m o valor projetado de nascimentos da localidade</li>\n<li>'obito' obt\u00e9m o valor projetado de \u00f3bitos da localidade;</li>\n<li>'incremento' obt\u00e9m o incremento populacional projetado.</li>\n<li>None obt\u00e9m um dicion\u00e1rio com todos os valores anteriores.</li>\n</ul></li>\n<li><strong>localidade</strong> (int, optional):\nC\u00f3digo da localidade desejada.\nPor padr\u00e3o, obt\u00e9m os valores do Brasil. Utilize a fun\u00e7\u00e3o\n<code>ibge.localidades</code> para identificar a localidade desejada.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Dicion\u00e1rio de proje\u00e7\u00f5es.</li>\n<li><strong>int</strong>: Valor projetado para o indicador escolhido.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_LocalidadeError</strong>: Caso c\u00f3digo da localidade seja inv\u00e1lido.</li>\n<li><strong>ValueError</strong>: Caso o argumento <code>projecao</code> seja inv\u00e1lido.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Proje\u00e7\u00e3o de \u00f3bito do Brasil.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">populacao</span><span class=\"p\">(</span><span class=\"s1\">&#39;obito&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">45000</span>\n</code></pre></div>\n\n<p>Obter dados do Rio de Janeiro (localidade 33)</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">populacao</span><span class=\"p\">(</span><span class=\"n\">localidade</span><span class=\"o\">=</span><span class=\"mi\">33</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;localidade&#39;: &#39;33&#39;,</span>\n<span class=\"go\">    &#39;horario&#39;: &#39;03/07/2021 19:15:48&#39;,</span>\n<span class=\"go\">    &#39;projecao&#39;: {</span>\n<span class=\"go\">        &#39;populacao&#39;: 17459953,</span>\n<span class=\"go\">        &#39;periodoMedio&#39;: {</span>\n<span class=\"go\">            &#39;incrementoPopulacional&#39;: 330508</span>\n<span class=\"go\">        }</span>\n<span class=\"go\">    }</span>\n<span class=\"go\">}</span>\n</code></pre></div>\n", "parameters": ["projecao", "localidade"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.misc.localidades", "modulename": "DadosAbertosBrasil._ibge.misc", "qualname": "localidades", "type": "function", "doc": "<p>Obt\u00e9m o conjunto de localidades do Brasil e suas intrarregi\u00f5es.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nivel</strong> (str, default='distritos'):\nN\u00edvel geogr\u00e1fico dos dados.</li>\n<li><strong>divisoes</strong> (str, optional):\nSubdivi\u00f5es intrarregionais do n\u00edvel.\nSe None, captura todos os registros do <code>nivel</code>.</li>\n<li><strong>localidade</strong> (int or str or list, optional):\nID (os lista de IDs) da localidade que filtrar\u00e1 o <code>nivel</code>.</li>\n<li><strong>ordenar_por</strong> (str, optional):\nColuna pela qual a tabela ser\u00e1 ordenada.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, defina a coluna 'id' como index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo os localidades desejadas.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_LocalidadeError</strong>: Caso o n\u00edvel geogr\u00e1fico seja inv\u00e1lido.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Captura todos os estados do Brasil</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">localidades</span><span class=\"p\">(</span><span class=\"n\">nivel</span><span class=\"o\">=</span><span class=\"s1\">&#39;estados&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">    id sigla                 nome  regiao_id regiao_sigla   regiao_nome</span>\n<span class=\"go\">0   11    RO             Rond\u00f4nia          1            N         Norte</span>\n<span class=\"go\">1   12    AC                 Acre          1            N         Norte</span>\n<span class=\"go\">2   13    AM             Amazonas          1            N         Norte</span>\n<span class=\"go\">3   14    RR              Roraima          1            N         Norte</span>\n<span class=\"go\">4   15    PA                 Par\u00e1          1            N         Norte</span>\n<span class=\"go\">.. ...   ...                  ...        ...          ...           ...</span>\n</code></pre></div>\n\n<p>Captura todos os distritos do Brasil, colocando o ID como index.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">localidades</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">                          nome  municipio_id  ... regiao_sigla   regiao_nome</span>\n<span class=\"go\">id                                            ...                           </span>\n<span class=\"go\">520005005      Abadia de Goi\u00e1s       5200050  ...           CO  Centro-Oeste</span>\n<span class=\"go\">310010405  Abadia dos Dourados       3100104  ...           SE       Sudeste</span>\n<span class=\"go\">520010005            Abadi\u00e2nia       5200100  ...           CO  Centro-Oeste</span>\n<span class=\"go\">520010010       Posse d&#39;Abadia       5200100  ...           CO  Centro-Oeste</span>\n<span class=\"go\">310020305               Abaet\u00e9       3100203  ...           SE       Sudeste</span>\n<span class=\"gp\">... </span>                       <span class=\"o\">...</span>           <span class=\"o\">...</span>  <span class=\"o\">...</span>          <span class=\"o\">...</span>           <span class=\"o\">...</span>\n</code></pre></div>\n\n<p>Captura todos os munic\u00edpios do estado do Rio de Janeiro (localidade=33)</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">localidades</span><span class=\"p\">(</span><span class=\"n\">nivel</span><span class=\"o\">=</span><span class=\"s1\">&#39;estados&#39;</span><span class=\"p\">,</span> <span class=\"n\">divisoes</span><span class=\"o\">=</span><span class=\"s1\">&#39;municipios&#39;</span><span class=\"p\">,</span> <span class=\"n\">localidade</span><span class=\"o\">=</span><span class=\"mi\">33</span><span class=\"p\">)</span>\n<span class=\"go\">         id                nome  microrregiao_id           microrregiao_nome      0   3300100      Angra dos Reis            33013         Ba\u00eda da Ilha Grande   </span>\n<span class=\"go\">1   3300159             Aperib\u00e9            33002      Santo Ant\u00f4nio de P\u00e1dua   </span>\n<span class=\"go\">2   3300209            Araruama            33010                       Lagos   </span>\n<span class=\"go\">3   3300225               Areal            33005                   Tr\u00eas Rios   </span>\n<span class=\"go\">4   3300233  Arma\u00e7\u00e3o dos B\u00fazios            33010                       Lagos   </span>\n<span class=\"go\">..      ...                 ...              ...                         ...</span>\n</code></pre></div>\n\n<h6 id=\"references\">References</h6>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "parameters": ["nivel", "divisoes", "localidade", "ordenar_por", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.misc.malha", "modulename": "DadosAbertosBrasil._ibge.misc", "qualname": "malha", "type": "function", "doc": "<p>Obt\u00e9m a URL para a malha referente ao identificador da localidade.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>localidade</strong> (int, optional):\nC\u00f3digo da localidade desejada.\nUtilize a fun\u00e7\u00e3o <code>ibge.localidades</code> para identificar a localidade.</li>\n<li><strong>nivel</strong> (str, default='estados'):\nN\u00edvel geogr\u00e1fico dos dados.</li>\n<li><strong>divisoes</strong> (str, optional):\nSubdivi\u00f5es intrarregionais do n\u00edvel.\nSe None, apresenta a malha sem subdivis\u00f5es.</li>\n<li><strong>periodo</strong> (int, default=2020):\nAno da revis\u00e3o da malha.</li>\n<li><strong>formato</strong> ({'svg', 'json', 'geojson'}, default='svg'):\nFormato dos dados da malha.</li>\n<li><strong>qualidade</strong> ({'minima', 'intermediaria', 'maxima'}, default='minima'):\nQualidade de imagem da malha.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Se formato='svg', retorna a URL da malha da localidade desejada.</li>\n<li><strong>dict</strong>: Se formato='json', retorna a malha em formato TopoJSON.</li>\n<li><strong>dict</strong>: Se formato='geojson', retorna a malha em formato GeoJSON.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_LocalidadeError</strong>: Caso o n\u00edvel geogr\u00e1fico seja inv\u00e1lido.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Captura a malha do Distrito Federal (localidade=53) em formato GeoJSON.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">malha</span><span class=\"p\">(</span><span class=\"n\">localidade</span><span class=\"o\">=</span><span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"n\">formato</span><span class=\"o\">=</span><span class=\"s1\">&#39;geojson&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;type&#39;: &#39;FeatureCollection&#39;,</span>\n<span class=\"go\">    &#39;features&#39;: [{&#39;type&#39;: &#39;Feature&#39;,</span>\n<span class=\"go\">        &#39;geometry&#39;: {&#39;type&#39;: &#39;Polygon&#39;,</span>\n<span class=\"go\">            &#39;coordinates&#39;: [[[-47.31, -16.0363], ...</span>\n</code></pre></div>\n\n<p>Captura a malha de Joinville em formato SVG com qualidade m\u00ednima.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">malha</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">nivel</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;municipios&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">localidade</span> <span class=\"o\">=</span> <span class=\"mi\">4209102</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">formato</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;svg&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">qualidade</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;minima&#39;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&#39;https://servicodados.ibge.gov.br/api/v3/malhas/municipios/4209102?...&#39;</span>\n</code></pre></div>\n\n<p>Captura a malha do Brasil subdividido por UF em formato TopoJSON.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">malha</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">nivel</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;paises&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">localidade</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;BR&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">divisoes</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;uf&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">formato</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;json&#39;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;type&#39;: &#39;Topology&#39;,</span>\n<span class=\"go\">    &#39;arcs&#39;: [[[32967, 111009], [-821, 372]],</span>\n<span class=\"go\">        [[32146, 111381],</span>\n<span class=\"go\">        [133, 124],</span>\n<span class=\"go\">        [15, 106], ...</span>\n</code></pre></div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "parameters": ["localidade", "nivel", "divisoes", "periodo", "formato", "qualidade"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.misc.coordenadas", "modulename": "DadosAbertosBrasil._ibge.misc", "qualname": "coordenadas", "type": "function", "doc": "<p>Obt\u00e9m as coordenadas de todas as localidades brasileiras, incluindo\nlatitude, longitude e altitude.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame das coordenadas de todas as localidade brasileiras.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">coordenadas</span><span class=\"p\">()</span>\n<span class=\"go\">       GM_PONTO     ID     CD_GEOCODIGO    TIPO   CD_GEOCODBA NM_BAIRRO  ...</span>\n<span class=\"go\">0           NaN      1  110001505000001  URBANO  1.100015e+11   Redondo  ...</span>\n<span class=\"go\">1           NaN      2  110001515000001  URBANO           NaN       NaN  ...</span>\n<span class=\"go\">2           NaN      3  110001520000001  URBANO           NaN       NaN  ...</span>\n<span class=\"go\">3           NaN      4  110001525000001  URBANO           NaN       NaN  ...</span>\n<span class=\"go\">4           NaN      5  110001530000001  URBANO           NaN       NaN  ...</span>\n<span class=\"go\">..          ...     ..              ...     ...           ...       ...  ...</span>\n</code></pre></div>\n", "parameters": [], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.nomes", "modulename": "DadosAbertosBrasil._ibge.nomes", "qualname": "", "type": "module", "doc": "<p>Subm\u00f3dulo IBGE contendo os wrappers da API do Nomes 2.0.</p>\n\n<p>Este subm\u00f3dulo \u00e9 importado automaticamente com o m\u00f3dulo <code>ibge</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">DadosAbertosBrasil</span> <span class=\"kn\">import</span> <span class=\"n\">ibge</span>\n</code></pre></div>\n\n<h2 id=\"documentacao-original\">Documenta\u00e7\u00e3o Original</h2>\n\n<p>https://servicodados.ibge.gov.br/api/docs</p>\n"}, {"fullname": "DadosAbertosBrasil._ibge.nomes.nomes", "modulename": "DadosAbertosBrasil._ibge.nomes", "qualname": "nomes", "type": "function", "doc": "<p>Obt\u00e9m a frequ\u00eancia de nascimentos por d\u00e9cada dos nomes consultados.</p>\n\n<p>Defina o campo <code>nomes</code> com um string ou uma lista de string.\nUse os argumentos opcionais para definir sexo e localidade dos nomes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nomes</strong> (list or str):\nNome ou lista de nomes a ser consultado.</li>\n<li><strong>sexo</strong> ({'F', 'M'}, optional):\n<ul>\n<li>'M' para consultar apenas o nome de pessoas do sexo masculino;</li>\n<li>'F' para consultar apenas o nome de pessoas do sexo feminino;</li>\n<li>None para consultar ambos.</li>\n</ul></li>\n<li><strong>localidade</strong> (int, optional):\nCaso deseje obter a frequ\u00eancia referente a uma dada localidade,\ninforme o par\u00e2metro localidade. Por padr\u00e3o, assume o valor BR,\nmas pode ser o identificador de um munic\u00edpio ou de uma UF.\nUtilize a fun\u00e7\u00e3o <code>ibge.localidade</code> para encontrar a localidade\ndesejada.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo a frequ\u00eancia de nascimentos por d\u00e9cada para\no(s) nome(s) consultado(s).</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_LocalidadeError</strong>: Caso o c\u00f3digo da localidade seja inv\u00e1lido.</li>\n<li><strong>ValueError</strong>: Caso nenhum valor seja encontrado ou em caso de um argumento inv\u00e1lido.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Forma mais simples da fun\u00e7\u00e3o.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">nomes</span><span class=\"p\">(</span><span class=\"s1\">&#39;Joao&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">nome           JOAO</span>\n<span class=\"go\">periodo            </span>\n<span class=\"go\">1930[         60155</span>\n<span class=\"go\">[1930,1940[  141772</span>\n<span class=\"go\">[1940,1950[  256001</span>\n<span class=\"go\">[1950,1960[  396438</span>\n<span class=\"go\">[1960,1970[  429148</span>\n<span class=\"go\">[1970,1980[  279975</span>\n<span class=\"go\">[1980,1990[  273960</span>\n<span class=\"go\">[1990,2000[  352552</span>\n<span class=\"go\">[2000,2010[  794118</span>\n</code></pre></div>\n\n<p>Quantidade de nascimento de \"Jo\u00e3o\" no Rio de Janeiro (localidade 33)\ne do sexo masculino ('M').</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">nomes</span><span class=\"p\">(</span><span class=\"s1\">&#39;Joao&#39;</span><span class=\"p\">,</span> <span class=\"n\">sexo</span><span class=\"o\">=</span><span class=\"s1\">&#39;M&#39;</span><span class=\"p\">,</span> <span class=\"n\">localidade</span><span class=\"o\">=</span><span class=\"mi\">33</span><span class=\"p\">)</span>\n<span class=\"go\">nome          JOAO</span>\n<span class=\"go\">periodo           </span>\n<span class=\"go\">1930[         3592</span>\n<span class=\"go\">[1930,1940[   9207</span>\n<span class=\"go\">[1940,1950[  16860</span>\n<span class=\"go\">[1950,1960[  25221</span>\n<span class=\"go\">[1960,1970[  25839</span>\n<span class=\"go\">[1970,1980[  15477</span>\n<span class=\"go\">[1980,1990[  16114</span>\n<span class=\"go\">[1990,2000[  26862</span>\n<span class=\"go\">[2000,2010[  68741</span>\n</code></pre></div>\n", "parameters": ["nomes", "sexo", "localidade"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.nomes.nomes_uf", "modulename": "DadosAbertosBrasil._ibge.nomes", "qualname": "nomes_uf", "type": "function", "doc": "<p>Obt\u00e9m a frequ\u00eancia de nascimentos por UF para o nome consultado.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nome</strong> (str):\nNome que se deseja pesquisar.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo a frequ\u00eancia de nascimentos do nome pesquisado,\nagrupado por Unidade da Federa\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">nomes_uf</span><span class=\"p\">(</span><span class=\"s1\">&#39;Joao&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<pre><code>        populacao  frequencia  proporcao\n</code></pre>\n\n<p>localidade <br />\n11            1562409       23366    1495.51\n12             733559       10383    1415.43\n13            3483985       41234    1183.53\n14             450479        5664    1257.33\n..                ...         ...        ...</p>\n", "parameters": ["nome"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.nomes.nomes_ranking", "modulename": "DadosAbertosBrasil._ibge.nomes", "qualname": "nomes_ranking", "type": "function", "doc": "<p>Obt\u00e9m o ranking dos nomes segundo a frequ\u00eancia de nascimentos por d\u00e9cada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>decada</strong> (int, optional):\nDeve ser um n\u00famero m\u00faltiplo de 10 no formato AAAA.</li>\n<li><strong>sexo</strong> ({'F', 'M'}, optional):\n<ul>\n<li>'M' para consultar apenas o nome de pessoas do sexo masculino;</li>\n<li>'F' para consultar apenas o nome de pessoas do sexo feminino;</li>\n<li>None para consultar ambos.</li>\n</ul></li>\n<li><strong>localidade</strong> (int, optional):\nCaso deseje obter o ranking de nomes referente a uma dada localidade,\ninforme o par\u00e2metro localidade. Por padr\u00e3o, assume o valor BR,\nmas pode ser o identificador de um munic\u00edpio ou de uma UF.\nUtilize a fun\u00e7\u00e3o <code>ibge.localidade</code> para encontrar a localidade\ndesejada.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo os nomes mais populadores dentro do universo de\npar\u00e2metros pesquisados.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_LocalidadeError</strong>: Caso o c\u00f3digo da localidade seja inv\u00e1lido.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Forma mais simples da fun\u00e7\u00e3o.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">nomes_ranking</span><span class=\"p\">()</span>\n<span class=\"go\">            nome  frequencia</span>\n<span class=\"go\">ranking                       </span>\n<span class=\"go\">1            MARIA    11734129</span>\n<span class=\"go\">2             JOSE     5754529</span>\n<span class=\"go\">3              ANA     3089858</span>\n<span class=\"go\">4             JOAO     2984119</span>\n<span class=\"go\">..             ...         ...</span>\n</code></pre></div>\n\n<p>Ranking de nomes femininos no Rio de Janeiro na decada de 1990.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">nomes_ranking</span><span class=\"p\">(</span><span class=\"n\">decada</span><span class=\"o\">=</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"n\">localidade</span><span class=\"o\">=</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"n\">sexo</span><span class=\"o\">=</span><span class=\"s1\">&#39;F&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">            nome  frequencia</span>\n<span class=\"go\">ranking                       </span>\n<span class=\"go\">1              ANA       44284</span>\n<span class=\"go\">2            MARIA       27944</span>\n<span class=\"go\">3            ALINE       26084</span>\n<span class=\"go\">4          VANESSA       24225</span>\n<span class=\"go\">..             ...         ...</span>\n</code></pre></div>\n", "parameters": ["decada", "sexo", "localidade"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.sidra", "modulename": "DadosAbertosBrasil._ibge.sidra", "qualname": "", "type": "module", "doc": "<p>Subm\u00f3dulo IBGE contendo os wrappers da API do SIDRA.</p>\n\n<p>Este subm\u00f3dulo \u00e9 importado automaticamente com o m\u00f3dulo <code>ibge</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">DadosAbertosBrasil</span> <span class=\"kn\">import</span> <span class=\"n\">ibge</span>\n</code></pre></div>\n\n<h6 id=\"references\">References</h6>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n"}, {"fullname": "DadosAbertosBrasil._ibge.sidra.lista_tabelas", "modulename": "DadosAbertosBrasil._ibge.sidra", "qualname": "lista_tabelas", "type": "function", "doc": "<p>Lista de tabelas dispon\u00edveis no SIDRA.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pesquisa</strong> (str, optional):\nC\u00f3digo de duas letras da pesquisa que ser\u00e1 buscada.\nUtilize a fun\u00e7\u00e3o <code>ibge.lista_pesquisas</code> para encontrar o c\u00f3digo.</li>\n<li><strong>contendo</strong> (str, optional):\nBuscar apenas tabelas que contenham essa sequ\u00eancia de caracteres.</li>\n<li><strong>excluindo</strong> (str, optional):\nBuscar tabelas que n\u00e3o contenham essa sequ\u00eancia de caracteres.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna 'tabela_id' como index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Lista de tabelas dispon\u00edveis no SIDRA.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Forma mais simples da fun\u00e7\u00e3o.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">lista_tabelas</span><span class=\"p\">()</span>    \n<span class=\"go\">    tabela_id                                        tabela_nome  ...</span>\n<span class=\"go\">0        1732  Dados gerais das empresas por faixas de pessoa...  ...</span>\n<span class=\"go\">1        1735  Dados gerais das unidades locais por faixas de...  ...</span>\n<span class=\"go\">2        1734  Dados gerais das unidades locais por faixas de...  ...</span>\n<span class=\"go\">3        1733  Dados gerais das unidades locais por faixas de...  ...</span>\n<span class=\"go\">4        2869  Empresas e outras organiza\u00e7\u00f5es e suas unidades...  ...</span>\n</code></pre></div>\n\n<p>Listar tabelas do Censo Demogr\u00e1fico (pesquisa 'CD'), contendo o termo\n'rendimento' no t\u00edtulo, por\u00e9m n\u00e3o contendo 'Distribui\u00e7\u00e3o', definindo a\ncoluna <code>tabela_id</code> como index do DataFrame.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">lista_tabelas</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pesquisa</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CD&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">contendo</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rendimento&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">excluindo</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Distribui\u00e7\u00e3o&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">                                                 tabela_nome pesquisa_id  ...</span>\n<span class=\"go\">tabela_id                                                               </span>\n<span class=\"go\">171        Chefes de domic\u00edlios particulares permanentes ...          CD  ...</span>\n<span class=\"go\">3534       Domic\u00edlios particulares permanentes com rendim...          CD  ...</span>\n<span class=\"go\">3525       Domic\u00edlios particulares permanentes com rendim...          CD  ...</span>\n<span class=\"go\">2428       Domic\u00edlios particulares permanentes com rendim...          CD  ...</span>\n<span class=\"go\">2427       Domic\u00edlios particulares permanentes com rendim...          CD  ...</span>\n</code></pre></div>\n", "parameters": ["pesquisa", "contendo", "excluindo", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.sidra.lista_pesquisas", "modulename": "DadosAbertosBrasil._ibge.sidra", "qualname": "lista_pesquisas", "type": "function", "doc": "<p>Lista de pesquisas dispon\u00edveis no SIDRA.</p>\n\n<p>Esta fun\u00e7\u00e3o \u00e9 utilizada para identificar o c\u00f3digo usado pela fun\u00e7\u00e3o\n<code>ibge.lista_tabelas</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna 'pesquisa_id' como index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Lista de pesquisas dispon\u00edveis no SIDRA.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">lista_pesquisas</span><span class=\"p\">()</span>\n<span class=\"go\">   pesquisa_id                                      pesquisa_nome</span>\n<span class=\"go\">0           CL                       Cadastro Central de Empresas</span>\n<span class=\"go\">1           CA                                 Censo Agropecu\u00e1rio</span>\n<span class=\"go\">2           ME           Censo Comum do Mercosul, Bol\u00edvia e Chile</span>\n<span class=\"go\">3           CD                                  Censo Demogr\u00e1fico</span>\n<span class=\"go\">4           CM                             Contagem da Popula\u00e7\u00e3o </span>\n<span class=\"go\">..         ...                                                ...</span>\n</code></pre></div>\n", "parameters": ["index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.sidra.Metadados", "modulename": "DadosAbertosBrasil._ibge.sidra", "qualname": "Metadados", "type": "class", "doc": "<p>Metadados da tabela desejada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tabela</strong> (int):\nC\u00f3digo num\u00e9rico da tabela desejada.\nUtilize a fun\u00e7\u00e3o <code>ibge.lista_tabelas</code> para encontrar o c\u00f3digo.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nLista completa de metadados da tabela.</li>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico da tabela.</li>\n<li><strong>nome</strong> (str):\nNome da tabela.</li>\n<li><strong>assunto</strong> (str):\nAssunto da tabela.</li>\n<li><strong>periodos</strong> (dict):\nDicion\u00e1rio contendo a frequ\u00eancia, in\u00edcio e fim da tabela.</li>\n<li><strong>localidades</strong> (dict):\nDicion\u00e1rio contendo os n\u00edveis territoriais da tabela.</li>\n<li><strong>variaveis</strong> (list of dict):\nLista de vari\u00e1veis dispon\u00edveis para a tabela.</li>\n<li><strong>classificacoes</strong> (list of dict):\nLista de classifica\u00e7\u00f5es e categorias dispon\u00edveis para a tabela.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<ol>\n<li>Crie uma inst\u00e2ncia de <code>Metadados</code> utilizando o c\u00f3digo da tabela SIDRA\ncomo argumento.</li>\n</ol>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">Metadados</span><span class=\"p\">(</span><span class=\"n\">tabela</span><span class=\"o\">=</span><span class=\"mi\">1301</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<ol>\n<li>Chame os atributos para obter informa\u00e7\u00f5es sobre a tabela.</li>\n</ol>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">nome</span>\n<span class=\"go\">&#39;\u00c1rea e Densidade demogr\u00e1fica da unidade territorial&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">assunto</span>\n<span class=\"go\">&#39;Territ\u00f3rio&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">periodos</span>\n<span class=\"go\">{&#39;frequencia&#39;: &#39;anual&#39;, &#39;inicio&#39;: 2010, &#39;fim&#39;: 2010}</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil._ibge.sidra.Metadados.__init__", "modulename": "DadosAbertosBrasil._ibge.sidra", "qualname": "Metadados.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "tabela"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.sidra.sidra", "modulename": "DadosAbertosBrasil._ibge.sidra", "qualname": "sidra", "type": "function", "doc": "<p>Fun\u00e7\u00e3o para captura de dados do SIDRA - Sistema IBGE de Recupera\u00e7\u00e3o\nAutom\u00e1tica.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tabela</strong> (int):\nC\u00f3digo num\u00e9rico identificador da tabela.</li>\n<li><strong>periodos</strong> (list or int or str, default='last'):\nPer\u00edodos de consulta desejados:\n<ul>\n<li>'last': \u00daltimo per\u00edodo;</li>\n<li>'last n': \u00daltimos n per\u00edodos;</li>\n<li>'first': Primeiro per\u00edodo;</li>\n<li>'first n': Primeiros n per\u00edodos;</li>\n<li>'all': Todos os per\u00edodos dispon\u00edveis;</li>\n<li>list: Lista de per\u00edodos desejados;</li>\n<li>int: Um per\u00edodo espec\u00edfico;</li>\n<li>Range de per\u00edodos separados por h\u00edfen.</li>\n</ul></li>\n<li><strong>variaveis</strong> (list or int or str, default='allxp'):\nVari\u00e1veis de consulta desejadas:\n<ul>\n<li>'all': Todas as vari\u00e1veis dispon\u00edveis;</li>\n<li>'allxp': Todas as vari\u00e1veis, exceto as percentuais;</li>\n<li>list: Lista de vari\u00e1veis;</li>\n<li>int: Uma vari\u00e1veis espec\u00edfica.</li>\n</ul></li>\n<li><strong>localidades : dict, default={1</strong> ('all'}):\nLocalidades por n\u00edvel territorial.\nAs chaves dos dicion\u00e1rios devem ser o c\u00f3digo de n\u00edvel territorial:\n<ul>\n<li>1: Brasil;</li>\n<li>2: Grande regi\u00e3o (N, NE, SE, S, CO);</li>\n<li>3: Unidade da Federa\u00e7\u00e3o (UFs);</li>\n<li>6: Munic\u00edpio;</li>\n<li>7: Regi\u00e3o metropolitana;</li>\n<li>8: Mesorregi\u00e3o geogr\u00e1fica;</li>\n<li>9: Microrregi\u00e3o geogr\u00e1fica;</li>\n<li>13: Regi\u00e3o metropolitana e subdivis\u00e3o;</li>\n<li>14: Regi\u00e3o Integrada de Desenvolvimento;</li>\n<li>15: Aglomera\u00e7\u00e3o urbana.\nOs valores do dicion\u00e1rio devem ser:</li>\n<li>'all': Todas as localidades do n\u00edvel territorial.</li>\n<li>list: C\u00f3digos dos territ\u00f3rios desejados.</li>\n<li>int: Um territ\u00f3rio espec\u00edfico.</li>\n</ul></li>\n<li><strong>classificacoes</strong> (dict, optional):\nDicion\u00e1rio de classifica\u00e7\u00f5es e categorias.\nAs chaves do dicion\u00e1rio devem ser o c\u00f3digo da classifica\u00e7\u00e3o.\nOs valores do dicion\u00e1rio devem ser:\n<ul>\n<li>'all': Todas as categorias desta classifica\u00e7\u00e3o;</li>\n<li>'allxt': Todas as categorias, exceto as totais;</li>\n<li>list: Lista de categorias desejadas;</li>\n<li>int: Uma categoria espec\u00edfica.</li>\n</ul></li>\n<li><strong>ufs_extintas</strong> (bool, default=False):\nSe True, adiciona as UFs extintas (se dispon\u00edvel na tabela).\n<ul>\n<li>20: Fernando de Noronha</li>\n<li>34: Guanabara</li>\n</ul></li>\n<li><strong>decimais</strong> (int, optional):\nN\u00famero de fixo de casas decimais do resultado, entre 0 e 9.\nSe None, utiliza o padr\u00e3o de cada vari\u00e1vel.</li>\n<li><strong>retorna</strong> (str, default='dataframe'):\nFormato do dado retornado:\n<ul>\n<li>'dataframe': Retorna um DataFrame Pandas;</li>\n<li>'json': Retorna um dicion\u00e1rio no formato json original;</li>\n<li>'url': Retorna a URL para consulta.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se retorna='dataframe', retorna um DataFrame com os resultados.</li>\n<li><strong>dict</strong>: Se retorna='json', retorna um dicion\u00e1rio no formato json original.</li>\n<li><strong>str</strong>: Se retorna='url', retorna a URL para consulta.</li>\n</ul>\n", "parameters": ["tabela", "periodos", "variaveis", "localidades", "classificacoes", "ufs_extintas", "decimais", "retorna"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._ibge.sidra.referencias", "modulename": "DadosAbertosBrasil._ibge.sidra", "qualname": "referencias", "type": "function", "doc": "<p>Obt\u00e9m uma base de c\u00f3digos para utilizar como argumento na busca do SIDRA.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> ({'A', 'C', 'N', 'P', 'E', 'V'}):\n<ul>\n<li>'A': Assuntos;</li>\n<li>'C': Classifica\u00e7\u00f5es;</li>\n<li>'N': N\u00edveis geogr\u00e1ficos;</li>\n<li>'P': Per\u00edodos;</li>\n<li>'E': Periodicidades;</li>\n<li>'V': Vari\u00e1veis.</li>\n</ul></li>\n<li><strong>index</strong> (bool, default=False):\nDefina True caso o campo 'id' deva ser o index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo todas as refer\u00eancias do c\u00f3digo pesquisado.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: Caso o c\u00f3digo da refer\u00eancia seja inv\u00e1lido.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Lista assuntos.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">referencias</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">      id                                       literal</span>\n<span class=\"go\">0    148                         Abastecimento de \u00e1gua</span>\n<span class=\"go\">1     70                              Abate de animais</span>\n<span class=\"go\">2    110                Acesso a esgotamento sanit\u00e1rio</span>\n<span class=\"go\">3    147                             Acesso \u00e0 internet</span>\n<span class=\"go\">4    107  Acesso a servi\u00e7o de coleta de lixo dom\u00e9stico</span>\n<span class=\"go\">..    ..                                            ..</span>\n</code></pre></div>\n\n<p>Lista classifica\u00e7\u00f5es usando o <code>\u00ecd</code> da classifica\u00e7\u00e3o como index\ndo DataFrame.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">referencias</span><span class=\"p\">(</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">                                                 literal</span>\n<span class=\"go\">id                                                      </span>\n<span class=\"go\">588    Acessibilidade poss\u00edvel na maior parte das via...</span>\n<span class=\"go\">957    Acesso \u00e0 Internet por telefone m\u00f3vel celular p...</span>\n<span class=\"go\">681                    Acesso a televis\u00e3o por assinatura</span>\n<span class=\"go\">12236                               Adequa\u00e7\u00e3o da moradia</span>\n<span class=\"go\">806                      Aduba\u00e7\u00e3o, calagem e agrot\u00f3xicos</span>\n<span class=\"gp\">... </span>                                                 <span class=\"o\">...</span>\n</code></pre></div>\n", "parameters": ["cod", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._utils.errors", "modulename": "DadosAbertosBrasil._utils.errors", "qualname": "", "type": "module", "doc": "<p>Erros espec\u00edficos dos m\u00f3dulos do DadosAbertosBrasil.</p>\n"}, {"fullname": "DadosAbertosBrasil._utils.errors.DAB_DataError", "modulename": "DadosAbertosBrasil._utils.errors", "qualname": "DAB_DataError", "type": "class", "doc": "<p>Erro gerado quando o usu\u00e1rio insere um valor inv\u00e1lido para a data.</p>\n"}, {"fullname": "DadosAbertosBrasil._utils.errors.DAB_InputError", "modulename": "DadosAbertosBrasil._utils.errors", "qualname": "DAB_InputError", "type": "class", "doc": "<p>Erro gerado quando o usu\u00e1rio insere um valor inv\u00e1lido para um argumento.</p>\n"}, {"fullname": "DadosAbertosBrasil._utils.errors.DAB_LocalidadeError", "modulename": "DadosAbertosBrasil._utils.errors", "qualname": "DAB_LocalidadeError", "type": "class", "doc": "<p>Erro gerado quando o usu\u00e1rio insere um valor inv\u00e1lido para a localidade.</p>\n"}, {"fullname": "DadosAbertosBrasil._utils.errors.DAB_MoedaError", "modulename": "DadosAbertosBrasil._utils.errors", "qualname": "DAB_MoedaError", "type": "class", "doc": "<p>Erro gerado quando o usu\u00e1rio insere um valor inv\u00e1lido para uma moeda.</p>\n"}, {"fullname": "DadosAbertosBrasil._utils.errors.DAB_UFError", "modulename": "DadosAbertosBrasil._utils.errors", "qualname": "DAB_UFError", "type": "class", "doc": "<p>Erro gerado quando o usu\u00e1rio insere um valor inv\u00e1lido para a UF.</p>\n"}, {"fullname": "DadosAbertosBrasil._utils.errors.DAB_DeprecationError", "modulename": "DadosAbertosBrasil._utils.errors", "qualname": "DAB_DeprecationError", "type": "class", "doc": "<p>Erro gerado quando o usu\u00e1rio chama uma fun\u00e7\u00e3o depreciada.</p>\n"}, {"fullname": "DadosAbertosBrasil._utils.get_data", "modulename": "DadosAbertosBrasil._utils.get_data", "qualname": "", "type": "module", "doc": "<p>Fun\u00e7\u00e3o que captura os dados das APIs.</p>\n\n<p>Adiciona o endpoint, path e par\u00e2metros do request e retorna um arquivo JSON.</p>\n"}, {"fullname": "DadosAbertosBrasil._utils.get_data.get_data", "modulename": "DadosAbertosBrasil._utils.get_data", "qualname": "get_data", "type": "function", "doc": "<p>Coleta os dados requisitados das APIs REST.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>endpoint</strong> (str):\nDiret\u00f3rio base da API desejada.</li>\n<li><strong>path</strong> (list or str):\nCaminho de par\u00e2metros para acessar a fun\u00e7\u00e3o desejada.\nPode ser uma string de par\u00e2metros unidos por barras '/' ou pode ser\numa lista de strings na ordem correta. Os dois m\u00e9todos produzem o\nmesmo resultado.</li>\n<li><strong>params</strong> (dict, optional):\nDicion\u00e1rio de par\u00e2metros de busca que ser\u00e3o enviados para o request.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Dados brutos coletados da API.</li>\n</ul>\n", "parameters": ["endpoint", "path", "params"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._utils.get_data.get_and_format", "modulename": "DadosAbertosBrasil._utils.get_data", "qualname": "get_and_format", "type": "function", "doc": "<p>Fun\u00e7\u00e3o padr\u00e3o para coleta e formata\u00e7\u00e3o de dados JSON.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api</strong> ({'camara', 'senado'}):\nSeleciona o endpoint da API desejada.</li>\n<li><strong>path</strong> (str or list of str):\nDiret\u00f3rio dos dados a partir do endpoint.</li>\n<li><strong>params</strong> (dict, optional):\nPar\u00e2metros do request HTTP.</li>\n<li><strong>unpack_keys</strong> (list of str, optional):\nLista de chaves do arquivo JSON para acessar os dados relevantes.</li>\n<li><strong>cols_to_rename</strong> (dict, optional):\nColunas que ser\u00e3o renomeadas.</li>\n<li><strong>cols_to_int</strong> (list of str, optional):\nLista de colunas que ser\u00e3o convertidas em <code>int</code>.</li>\n<li><strong>cols_to_date</strong> (list of str, optional):\nLista de colunas que ser\u00e3o convertidas em <code>datetime</code>.</li>\n<li><strong>cols_to_bool</strong> (list of str, optional):\nLista de colunas que ser\u00e3o convertidas em <code>bool</code>.</li>\n<li><strong>true_value</strong> (str, optional):\nValor que ser\u00e1 convertido para <code>True</code> nas colunas listadas pelo\nargumento <code>cols_to_bool</code>.</li>\n<li><strong>false_value</strong> (str, optional):\nValor que ser\u00e1 convertido para <code>False</code> nas colunas listadas pelo\nargumento <code>cols_to_bool</code>.</li>\n<li><strong>url_cols</strong> (list of str, optional):\nLista das colunas que ser\u00e3o removidas ou n\u00e3o pelo argumento <code>url</code>.</li>\n<li><strong>url</strong> (bool, default=True):\nRetorna ou n\u00e3o as colunas contendo URI, URL ou e-mails.</li>\n<li><strong>index_col</strong> (str, default='codigo'):\nNome da coluna que ser\u00e1 o index do DataFrame, caso o argumento <code>index</code>\nseja igual a <code>True</code>.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna de <code>index_col</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DadosAbertosBrasil._utils.errors.DAB_InputError</strong>: Caso nenhum dado seja encontrado.</li>\n</ul>\n", "parameters": ["api", "path", "params", "unpack_keys", "cols_to_rename", "cols_to_int", "cols_to_date", "cols_to_bool", "true_value", "false_value", "url_cols", "url", "index_col", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._utils.get_data.DAB_Base", "modulename": "DadosAbertosBrasil._utils.get_data", "qualname": "DAB_Base", "type": "class", "doc": "<p>Base para os objetos DadosAbertosBrasil.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api</strong> ({'camara', 'senado'}):\nRefer\u00eancia da API que ser\u00e1 consultada.</li>\n<li><strong>path</strong> (str or list of str):\nArgumentos da consulta via URL.</li>\n<li><strong>unpack_keys</strong> (str or list of str):\nLista de keys do arquivo JSON onde est\u00e3o os dados.</li>\n<li><strong>error_key</strong> (str):\nKey que deve estar contida no arquivo JSON.</li>\n<li><strong>atributos</strong> (dict[str, str]):\nDicion\u00e1rio de atributos e respectivos unpack_keys.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nArquivo JSON em seu formato bruto.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DadosAbertosBrasil._utils.errors.DAB_InputError</strong>: Quando os dados do Senador n\u00e3o forem encontrado, por qualquer que seja\no motivo.</li>\n</ul>\n"}, {"fullname": "DadosAbertosBrasil._utils.get_data.DAB_Base.__init__", "modulename": "DadosAbertosBrasil._utils.get_data", "qualname": "DAB_Base.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "api", "path", "unpack_keys", "error_key", "atributos"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._utils.parse", "modulename": "DadosAbertosBrasil._utils.parse", "qualname": "", "type": "module", "doc": "<p>Fun\u00e7\u00f5es para padroniza\u00e7\u00e3o de par\u00e2metros entre os m\u00f3dulos.</p>\n\n<p>Padroniza argumentos de data, UF, localidades e moeda, gerando <code>Exceptions</code>\nespeciais do m\u00f3dulo <code>_utils.errors</code>.</p>\n"}, {"fullname": "DadosAbertosBrasil._utils.parse.data", "modulename": "DadosAbertosBrasil._utils.parse", "qualname": "data", "type": "function", "doc": "<p>Padroniza o input de datas entre m\u00f3dulos.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (datetime.datetime or datetime.date or str):\nInput a ser padronizado.\nPode ser uma objeto date, datetime ou uma string no formato ISO-8601.</li>\n<li><strong>modulo</strong> ({'camara', 'senado', 'bacen'}):\nM\u00f3dulo que o parser seja aplicado para selecionar a formata\u00e7\u00e3o\nadequada:\n<ul>\n<li>'camara': API da C\u00e2mara dos Deputados;</li>\n<li>'senado': API do Senado Federal;</li>\n<li>'bacen': Consultas do Banco Central do Brasil.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Data no formato adequado para o m\u00f3dulo escolhido.</li>\n</ul>\n", "parameters": ["data", "modulo"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._utils.parse.uf", "modulename": "DadosAbertosBrasil._utils.parse", "qualname": "uf", "type": "function", "doc": "<p>Converte os nomes dos estados em siglas padr\u00f5es.\nSuporta abreviaturas, acentua\u00e7\u00e3o e case sensibility.</p>\n\n<h6 id=\"parametros\">Parametros</h6>\n\n<p>uf: str\n    Nome ou sigla da UF.\nextintos: bool, default=False\n    Verificar tamb\u00e9m as UFs extintas:\n        - 20: Fernando de Noronha / FN\n        - 34: Guanabara / GB</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: String de dois caracteres mai\u00fasculos que representam a sigla da\nUnidade Federativa desejada.</li>\n</ul>\n", "parameters": ["uf", "extintos"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._utils.parse.localidade", "modulename": "DadosAbertosBrasil._utils.parse", "qualname": "localidade", "type": "function", "doc": "<p>Verifica se o c\u00f3digo da localidade \u00e9 v\u00e1lido.</p>\n\n<h6 id=\"parametros\">Parametros</h6>\n\n<p>localidade: str ou int\n    C\u00f3digo da localidade que se deseja verificar.\n    Caso localidade == None, retorna o valor padr\u00e3o do Brasil.\nbrasil: default = 1\n    Valor padr\u00e3o para o Brasil.\non_error: {'raise', 'brasil'}, default='raise'\n    - 'raise': Gera um erro quando o valor n\u00e3o for v\u00e1lido;\n    - 'brasil': Retorna o valor Brasil quando o valor n\u00e3o for v\u00e1lido.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str ou int</strong>: Valor da localidade validado.</li>\n</ul>\n", "parameters": ["localidade", "brasil", "on_error"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil._utils.parse.moeda", "modulename": "DadosAbertosBrasil._utils.parse", "qualname": "moeda", "type": "function", "doc": "<p>Verifica se o(s) c\u00f3digo(s) da(s) moeda(s) inserida(s) est\u00e1(\u00e3o) em um\nformato v\u00e1lido.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>moedas</strong> (str or list of str):\nS\u00edmbolo da moeda ou lista de s\u00edmbolos de moedas que se deseja validar.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list of str</strong>: Lista de s\u00edmbolos de moedas formatados.</li>\n</ul>\n", "parameters": ["moedas"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.bacen", "modulename": "DadosAbertosBrasil.bacen", "qualname": "", "type": "module", "doc": "<p>M\u00f3dulo de captura de dados das APIs do Banco Central do Brasil.</p>\n\n<h6 id=\"references\">References</h6>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n"}, {"fullname": "DadosAbertosBrasil.bacen.moedas", "modulename": "DadosAbertosBrasil.bacen", "qualname": "moedas", "type": "function", "doc": "<p>Obt\u00e9m os nomes e s\u00edmbolos das principais moedas internacionais.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo os nomes e s\u00edmbolos das principais moedas\ninternacionais.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.bacen.cambio</code>: \nUtilize a fun\u00e7\u00e3o <code>bacen.moedas</code> para identificar os argumentos da\nfun\u00e7\u00e3o <code>bacen.cambio</code>.  </p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Moedas do tipo 'A':\n    - Para calcular o valor equivalente em US$ (d\u00f3lar americano), divida o\n      montante na moeda consultada pela respectiva paridade.\n    - Para obter o valor em R$ (reais), multiplique o montante na moeda\n      consultada pela respectiva taxa.\nMoedas do tipo 'B':\n    - Para calcular o valor equivalente em US$ (d\u00f3lar americano),\n      multiplique o montante na moeda consultada pela respectiva paridade.\n    - Para obter o valor em R$ (reais), multiplique o montante na moeda\n      consultada pela respectiva taxa. </p>\n\n<h6 id=\"references\">References</h6>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bacen</span><span class=\"o\">.</span><span class=\"n\">moedas</span><span class=\"p\">()</span>\n<span class=\"go\">  simbolo                      nome tipo</span>\n<span class=\"go\">0     AUD         D\u00f3lar australiano    B</span>\n<span class=\"go\">1     CAD           D\u00f3lar canadense    A</span>\n<span class=\"go\">2     CHF              Franco su\u00ed\u00e7o    A</span>\n<span class=\"go\">3     DKK        Coroa dinamarquesa    A</span>\n<span class=\"go\">4     EUR                      Euro    B</span>\n<span class=\"go\">5     GBP           Libra Esterlina    B</span>\n<span class=\"go\">6     JPY                      Iene    A</span>\n<span class=\"go\">7     NOK          Coroa norueguesa    A</span>\n<span class=\"go\">8     SEK               Coroa sueca    A</span>\n<span class=\"go\">9     USD  D\u00f3lar dos Estados Unidos    A</span>\n</code></pre></div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "parameters": [], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.bacen.cambio", "modulename": "DadosAbertosBrasil.bacen", "qualname": "cambio", "type": "function", "doc": "<p>Taxa de c\u00e2mbio das principais moedas internacionais.</p>\n\n<p>\u00c9 poss\u00edvel escolher v\u00e1rias moedas inserindo uma lista no campo <code>moeda</code>.\nDefina o per\u00edodo da consulta pelos campos <code>inicio</code> e <code>fim</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>moedas</strong> (str or list of str, default='USD'):\nSigla da moeda ou lista de siglas de moedas que ser\u00e3o pesquisadas no\nformato 'MMM' (tr\u00eas letras). Utilize a fun\u00e7\u00e3o <code>bacen.moedas</code> para\nobter a lista de moedas v\u00e1lidas.</li>\n<li><strong>inicio</strong> (datetime or str, default='2000-01-01'):\nString no formato de data 'AAAA-MM-DD' que representa o primeiro dia\nda pesquisa.</li>\n<li><strong>fim</strong> (datetime or str, default=None):\nString no formato de data 'AAAA-MM-DD' que representa o \u00faltimo dia da\npesquisa. Caso este campo seja None, ser\u00e1 considerada a data de hoje.</li>\n<li><strong>cotacao</strong> ({'compra', 'venda'}, default='compra'):\nTipo de cota\u00e7\u00e3o.</li>\n<li><strong>boletim</strong> ({'abertura', 'intermedi\u00e1rio', 'fechamento'}, default='fechamento'):\nTipo de boletim.</li>\n<li><strong>index</strong> (bool, default=False):\nDefine se a coluna 'Data' ser\u00e1 o index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo as cota\u00e7\u00f5es di\u00e1rias das moedas selecionadas.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_DataError</strong>: Caso seja inserida uma data inv\u00e1lida.</li>\n<li><strong>DAB_MoedaError</strong>: Caso seja inserida uma moeda inv\u00e1lida.</li>\n<li><strong>ValueError</strong>: Caso nenhum dado seja encontrado devido a argumentos inv\u00e1lidos.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.bacen.moedas</code>: \nUtilize a fun\u00e7\u00e3o <code>bacen.moedas</code> para identificar as moedas que ser\u00e3o\nusadas no argumento da fun\u00e7\u00e3o <code>bacen.cambio</code>.  </p>\n\n<h6 id=\"references\">References</h6>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Retornar uma moeda usando argumentos padr\u00f5es.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bacen</span><span class=\"o\">.</span><span class=\"n\">cambio</span><span class=\"p\">(</span><span class=\"n\">moedas</span><span class=\"o\">=</span><span class=\"s1\">&#39;EUR&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">            Data      EUR</span>\n<span class=\"go\">0    2000-01-03  1.84601</span>\n<span class=\"go\">1    2000-01-04  1.88695</span>\n<span class=\"go\">2    2000-01-05  1.91121</span>\n<span class=\"go\">3    2000-01-06  1.90357</span>\n<span class=\"go\">4    2000-01-07  1.87790</span>\n<span class=\"go\">..          ...      ...</span>\n</code></pre></div>\n\n<p>Retornar v\u00e1rias moedas, alterando argumentos.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bacen</span><span class=\"o\">.</span><span class=\"n\">cambio</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">moedas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;USD&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;CAD&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>    <span class=\"n\">inicio</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2021-01-01&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fim</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2021-01-10&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">cotacao</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;venda&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">boletim</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;abertura&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">                USD     CAD</span>\n<span class=\"go\">Data                      </span>\n<span class=\"go\">2021-01-04  5.1402  4.0500</span>\n<span class=\"go\">2021-01-05  5.3405  4.1890</span>\n<span class=\"go\">2021-01-06  5.3013  4.1798</span>\n<span class=\"go\">2021-01-07  5.3174  4.1833</span>\n<span class=\"go\">2021-01-08  5.3612  4.2237</span>\n</code></pre></div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "parameters": ["moedas", "inicio", "fim", "cotacao", "boletim", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.bacen.serie", "modulename": "DadosAbertosBrasil.bacen", "qualname": "serie", "type": "function", "doc": "<p>S\u00e9rie do Sistema Gerenciador de S\u00e9rie Temporais (SGS) do Banco Central.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int):\nC\u00f3digo da s\u00e9rie temporal.\nUtilize o seguinte link para obter o n\u00famero da s\u00e9rie desejada:\nhttps://www3.bcb.gov.br/sgspub/</li>\n<li><strong>ultimos</strong> (int, optional):\nRetorna os \u00faltimos N valores da s\u00e9rie num\u00e9rica.</li>\n<li><strong>inicio</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o primeiro dia da pesquisa.</li>\n<li><strong>fim</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o \u00faltimo dia da pesquisa. Caso este campo seja None, ser\u00e1\nconsiderada a data de hoje.</li>\n<li><strong>index</strong> (bool, default=False):\nDefine se a coluna 'data' ser\u00e1 o index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo os valores da s\u00e9rie temporal pesquisada.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>JSONDecodeError</strong>: Em caso de par\u00e2metros inv\u00e1lidos.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.favoritos</code>: \nO m\u00f3dulo <code>favoritos</code> apresenta as principais s\u00e9ries tempor\u00e1is do Banco\nCentral do Brasil.  </p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Os argumentos <code>inicio</code> e <code>fim</code> devem ser usados em conjunto para\nfuncionar.</p>\n\n<h6 id=\"references\">References</h6>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Capturar a taxa SELIC desde 2010 at\u00e9 2021.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bacen</span><span class=\"o\">.</span><span class=\"n\">serie</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"mi\">432</span><span class=\"p\">,</span> <span class=\"n\">inicio</span><span class=\"o\">=</span><span class=\"s1\">&#39;2010-01-01&#39;</span><span class=\"p\">,</span> <span class=\"n\">fim</span><span class=\"o\">=</span><span class=\"s1\">&#39;2021-01-01&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           data valor</span>\n<span class=\"go\">0    2010-01-01  8.75</span>\n<span class=\"go\">1    2010-01-02  8.75</span>\n<span class=\"go\">2    2010-01-03  8.75</span>\n<span class=\"go\">3    2010-01-04  8.75</span>\n<span class=\"go\">4    2010-01-05  8.75</span>\n<span class=\"go\">..          ...   ...</span>\n</code></pre></div>\n\n<p>Capturar os \u00faltimos 5 valores da meta de infla\u00e7\u00e3o.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bacen</span><span class=\"o\">.</span><span class=\"n\">serie</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"mi\">13521</span><span class=\"p\">,</span> <span class=\"n\">ultimos</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">        data valor</span>\n<span class=\"go\">0 2019-01-01  4.25</span>\n<span class=\"go\">1 2020-01-01  4.00</span>\n<span class=\"go\">2 2021-01-01  3.75</span>\n<span class=\"go\">3 2022-01-01  3.50</span>\n<span class=\"go\">4 2023-01-01  3.25</span>\n</code></pre></div>\n\n<p>Capturar toda a s\u00e9rie de reservas internacionais (em milh\u00f5es de d\u00f3lares)\nusando a data como index do DataFrame.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bacen</span><span class=\"o\">.</span><span class=\"n\">serie</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"mi\">3546</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">             valor</span>\n<span class=\"go\">data              </span>\n<span class=\"go\">1970-12-01    1187</span>\n<span class=\"go\">1971-01-01    1229</span>\n<span class=\"go\">1971-02-01    1280</span>\n<span class=\"go\">1971-03-01    1316</span>\n<span class=\"go\">1971-04-01    1379</span>\n<span class=\"gp\">... </span>           <span class=\"o\">...</span>\n</code></pre></div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "parameters": ["cod", "ultimos", "inicio", "fim", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.bacen.expectativas", "modulename": "DadosAbertosBrasil.bacen", "qualname": "expectativas", "type": "function", "doc": "<p>Expectativas de mercado para os principais indicadores macroecon\u00f4micos.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>expectativa</strong> (str):\nTipo ou periodicidade da expectativa.\n<ul>\n<li>'mensal' ou 'mensais';</li>\n<li>'trimestral' ou 'trimestrais';</li>\n<li>'anual' ou 'anuais';</li>\n<li>'inflacao' ou 'inflacao12meses';</li>\n<li>'top5mensal' ou 'top5mensais',</li>\n<li>'top5anual' ou 'top5anuais',</li>\n<li>'instituicoes'.</li>\n</ul></li>\n<li><strong>indicador</strong> (str, optional):\nCapturar apenas o indicador desejado. Deve ser um dos seguintes\nindicadores, desde que esteja de acordo com a <code>expectativa</code> escolhida:\n<ul>\n<li>'Balan\u00e7a Comercial';</li>\n<li>'Balan\u00e7o de Pagamentos';</li>\n<li>'Fiscal';</li>\n<li>'IGP-DI';</li>\n<li>'IGP-M';</li>\n<li>'INPC';</li>\n<li>'IPA-DI';</li>\n<li>'IPA-M';</li>\n<li>'IPC-FIPE';</li>\n<li>'IPC-FIPEPre\u00e7os administrados por contrato e monitorados';</li>\n<li>'IPCA';</li>\n<li>'IPCA-15';</li>\n<li>'Meta para taxa over-selic';</li>\n<li>'PIB Agropecu\u00e1ria';</li>\n<li>'PIB Industrial';</li>\n<li>'PIB Servi\u00e7os';</li>\n<li>'PIB Total';</li>\n<li>'PIB TotalMeta para taxa over-selic';</li>\n<li>'Pre\u00e7os administrados por contrato e monitorados';</li>\n<li>'Produ\u00e7\u00e3o industrial';</li>\n<li>'Taxa de c\u00e2mbio'.\nCaso o valor seja None, retorna todos os indicadores dispon\u00edveis.</li>\n</ul></li>\n<li><strong>top</strong> (int, optional):\nN\u00famero m\u00e1ximo de registros que ser\u00e1 retornado.</li>\n<li><strong>ordenar_por</strong> (str, default='Data'):\nPor qual coluna da tabela os registros ser\u00e3o ordenados.</li>\n<li><strong>asc</strong> (bool, default=False):\n<ul>\n<li>Se True, ordena os registros pela coluna selecionada no argumento\n<code>ordenar_por</code> em ordem crescente (A-Z ou 0-9);</li>\n<li>Se False, ordena em ordem descrescente (Z-A ou 9-0).</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Tabela contendo uma breve estat\u00edstica descritiva da expectativa de\nmercado de cada indicador poe per\u00edodo de refer\u00eancia.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: Em caso de par\u00e2metros inv\u00e1lidos.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bacen</span><span class=\"o\">.</span><span class=\"n\">expectativa</span><span class=\"p\">(</span><span class=\"n\">expectativa</span><span class=\"o\">=</span><span class=\"s1\">&#39;mensal&#39;</span><span class=\"p\">,</span> <span class=\"n\">indicador</span><span class=\"o\">=</span><span class=\"s1\">&#39;IGP-M&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">      Indicador        Data DataReferencia  Media  Mediana  DesvioPadrao  ...</span>\n<span class=\"go\">0         IGP-M  2021-06-25        07/2022   0.31     0.30          0.21  ...</span>\n<span class=\"go\">1         IGP-M  2021-06-25        07/2021   0.64     0.61          0.42  ...</span>\n<span class=\"go\">2         IGP-M  2021-06-25        06/2021   1.25     1.10          0.58  ...</span>\n<span class=\"go\">3         IGP-M  2021-06-25        11/2022   0.47     0.47          0.16  ...</span>\n<span class=\"go\">4         IGP-M  2021-06-25        11/2021   0.50     0.50          0.24  ...</span>\n<span class=\"go\">..          ...         ...            ...    ...      ...           ...  ...</span>\n</code></pre></div>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bacen</span><span class=\"o\">.</span><span class=\"n\">expectativa</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">expectativa</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;trimestral&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">indicador</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;PIB Total&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">ordenar_por</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Media&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">asc</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">   Indicador        Data DataReferencia  Media  Mediana  DesvioPadrao  ...</span>\n<span class=\"go\">0  PIB Total  2020-06-02         2/2020 -14.00    -14.0          3.92  ...</span>\n<span class=\"go\">1  PIB Total  2020-06-09         2/2020 -14.00    -13.4          3.55  ...</span>\n<span class=\"go\">2  PIB Total  2020-06-01         2/2020 -13.99    -14.0          3.91  ...</span>\n</code></pre></div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "parameters": ["expectativa", "indicador", "top", "ordenar_por", "asc"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara", "modulename": "DadosAbertosBrasil.camara", "qualname": "", "type": "module", "doc": "<p>M\u00f3dulo para captura dos dados abertos da C\u00e2mara dos Deputados do Brasil.</p>\n\n<h2 id=\"mini-tutorial\">Mini-Tutorial</h2>\n\n<ol>\n<li><p>Importe o m\u00f3dulo <code>camara</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">DadosAbertosBrasil</span> <span class=\"kn\">import</span> <span class=\"n\">camara</span>\n</code></pre></div></li>\n<li><p>Busque o c\u00f3digo do objeto de estudo utilizando as fun\u00e7\u00f5es <code>lista</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">camara</span><span class=\"o\">.</span><span class=\"n\">lista_deputados</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n</code></pre></div></li>\n<li><p>Instancie o objeto de estudo utilizando o c\u00f3digo encontrado.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dep</span> <span class=\"o\">=</span> <span class=\"n\">camara</span><span class=\"o\">.</span><span class=\"n\">Deputado</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"p\">)</span>\n</code></pre></div></li>\n<li><p>Utilize os atributos da classe para obter informa\u00e7\u00f5es b\u00e1sicas do objeto.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dep</span><span class=\"o\">.</span><span class=\"n\">dados</span>\n</code></pre></div></li>\n<li><p>Utilize os m\u00e9todos da classe para obter informa\u00e7\u00f5es detalhadas do objeto.</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>dep.despesas( ... )</p>\n    </blockquote>\n  </blockquote>\n</blockquote></li>\n</ol>\n\n<h6 id=\"references\">References</h6>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n"}, {"fullname": "DadosAbertosBrasil.camara.Bloco", "modulename": "DadosAbertosBrasil.camara", "qualname": "Bloco", "type": "class", "doc": "<p>Informa\u00e7\u00f5es sobre um bloco partid\u00e1rio espec\u00edfico.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico do bloco partid\u00e1rio do qual se deseja informa\u00e7\u00f5es.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nConjunto completo de dados.</li>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico do bloco partid\u00e1rio.</li>\n<li><strong>legislatura</strong> (str):\nLegislatura do bloco partid\u00e1rio.</li>\n<li><strong>nome</strong> (str):\nNome do bloco partid\u00e1rio.</li>\n<li><strong>uri</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API do bloco partid\u00e1rio.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Obter o nome do bloco #576.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bl</span> <span class=\"o\">=</span> <span class=\"n\">camara</span><span class=\"o\">.</span><span class=\"n\">Bloco</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"mi\">576</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bl</span><span class=\"o\">.</span><span class=\"n\">nome</span>\n<span class=\"gp\">... </span><span class=\"s1\">&#39;PSL, PTB&#39;</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil.camara.Bloco.__init__", "modulename": "DadosAbertosBrasil.camara", "qualname": "Bloco.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cod"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Deputado", "modulename": "DadosAbertosBrasil.camara", "qualname": "Deputado", "type": "class", "doc": "<p>Retorna os dados cadastrais de um parlamentar que, em algum momento\nda hist\u00f3ria e por qualquer per\u00edodo, entrou em exerc\u00edcio na C\u00e2mara.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int):\nC\u00f3digo do parlamentar.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nConjunto completo de dados.</li>\n<li><strong>cod</strong> (int):\nC\u00f3digo de identifica\u00e7\u00e3o.</li>\n<li><strong>condicao_eleitoral</strong> (str):\nCondi\u00e7\u00e3o eleitoral.</li>\n<li><strong>cpf</strong> (str):\nN\u00famero do CPF.</li>\n<li><strong>descricao_status</strong> (str):\nDescri\u00e7\u00e3o do \u00faltimo status.</li>\n<li><strong>email</strong> (str):\nE-mail.</li>\n<li><strong>escolaridade</strong> (str):\nEscolaridade.</li>\n<li><strong>falecimento</strong> (str):\nData de falecimento no formato 'AAAA-MM-DD'.\nRetorna vazio caso o parlamentar n\u00e3o tenha falecido.</li>\n<li><strong>foto</strong> (str):\nURL da foto.</li>\n<li><strong>gabinete</strong> (dict):\nInforma\u00e7\u00f5es de identifica\u00e7\u00e3o e contato do gabinete.</li>\n<li><strong>legislatura</strong> (int):\nID da legislatura mais recente.</li>\n<li><strong>municipio_nascimento</strong> (str):\nMunic\u00edpio de nascimento.</li>\n<li><strong>nascimento</strong> (str):\nData de nascimento no formato 'AAAA-MM-DD'.</li>\n<li><strong>nome</strong> (str):\nNome mais comum.</li>\n<li><strong>nome_completo</strong> (str):\nNome civil completo.</li>\n<li><strong>nome_eleitoral</strong> (str):\nNome utilizado na campanha eleitoral.</li>\n<li><strong>partido</strong> (str):\n\u00daltimo partido.</li>\n<li><strong>rede_social</strong> (list):\nLista de nomes em redes sociais.</li>\n<li><strong>sexo</strong> (str):\n<ul>\n<li>'M': Masculino;</li>\n<li>'F': Feminino.</li>\n</ul></li>\n<li><strong>situacao</strong> (str):\nSitua\u00e7\u00e3o do \u00faltimo status.</li>\n<li><strong>uf</strong> (str):\nSigla da Unidade Federativa pela qual foi eleito.</li>\n<li><strong>uf_nascimento</strong> (str):\nUnidade Federativa de nascimento.</li>\n<li><strong>ultima_atualizacao</strong> (str):\nDia e hor\u00e1rio da \u00faltima atualiza\u00e7\u00e3o de status.</li>\n<li><strong>uri</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API.</li>\n<li><strong>website</strong> (str):\nWebsite.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>despesas()\n    As despesas com exerc\u00edcio parlamentar do deputado.\ndiscursos()\n    Os discursos feitos por um deputado em eventos diversos.\neventos()\n    Uma lista de eventos com a participa\u00e7\u00e3o do parlamentar.\nfrentes()\n    As frentes parlamentares das quais um deputado \u00e9 integrante.\nocupacoes()\n    Os empregos e atividades que o(a) deputado(a) j\u00e1 teve.\norgaos()\n    Os \u00f3rg\u00e3os dos quais um deputado \u00e9 integrante.\nprofissoes()\n    As frentes parlamentares das quais um deputado \u00e9 integrante.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Coletar partido mais recente do deputado Rodrigo Maia.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cod</span> <span class=\"o\">=</span> <span class=\"mi\">74693</span>   <span class=\"c1\"># C\u00f3digo do deputado</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dep</span> <span class=\"o\">=</span> <span class=\"n\">camara</span><span class=\"o\">.</span><span class=\"n\">Deputado</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"n\">cod</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dep</span><span class=\"o\">.</span><span class=\"n\">partido</span>\n<span class=\"gp\">... </span><span class=\"s1\">&#39;DEM&#39;</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil.camara.Deputado.__init__", "modulename": "DadosAbertosBrasil.camara", "qualname": "Deputado.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cod"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Deputado.despesas", "modulename": "DadosAbertosBrasil.camara", "qualname": "Deputado.despesas", "type": "function", "doc": "<p>As despesas com exerc\u00edcio parlamentar do deputado.</p>\n\n<p>D\u00e1 acesso aos registros de pagamentos e reembolsos feitos pela C\u00e2mara\nem prol do deputado, a t\u00edtulo da Cota para Exerc\u00edcio da Atividade\nParlamentar, a chamada \"cota parlamentar\".\nSe n\u00e3o forem passados os par\u00e2metros de tempo, o servi\u00e7o retorna os\ndados dos seis meses anteriores \u00e0 requisi\u00e7\u00e3o.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>legislatura</strong> (int, optional):\nID da legislatura em que tenham ocorrido as despesas.</li>\n<li><strong>ano</strong> (int, optional):\nAno de ocorr\u00eancia das despesas.</li>\n<li><strong>mes</strong> (int, optional):\nN\u00famero do m\u00eas de ocorr\u00eancia das despesas.</li>\n<li><strong>fornecedor</strong> (int, optional):\nCNPJ de uma pessoa jur\u00eddica, ou CPF de uma pessoa f\u00edsica,\nfornecedora do produto ou servi\u00e7o (apenas n\u00fameros).</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com\nesta requisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='ano'):\nNome do campo pelo qual a lista dever\u00e1 ser ordenada:\nqualquer um dos campos do retorno, e tamb\u00e9m idLegislatura.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "legislatura", "ano", "mes", "fornecedor", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Deputado.discursos", "modulename": "DadosAbertosBrasil.camara", "qualname": "Deputado.discursos", "type": "function", "doc": "<p>Os discursos feitos por um deputado em eventos diversos.</p>\n\n<p>Retorna uma lista de informa\u00e7\u00f5es sobre os pronunciamentos feitos\npelo deputado que tenham sido registrados, em quaisquer eventos,\nnos sistemas da C\u00e2mara.\nCaso os par\u00e2metros de tempo n\u00e3o sejam configurados na requisi\u00e7\u00e3o,\ns\u00e3o buscados os discursos ocorridos nos sete dias anteriores ao\nda requisi\u00e7\u00e3o.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>legislatura</strong> (int, optional):\nN\u00famero da legislatura a qual os dados buscados devem corresponder.</li>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='dataHoraInicio'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "legislatura", "inicio", "fim", "pagina", "itens", "asc", "ordenar_por", "url", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Deputado.eventos", "modulename": "DadosAbertosBrasil.camara", "qualname": "Deputado.eventos", "type": "function", "doc": "<p>Uma lista de eventos com a participa\u00e7\u00e3o do parlamentar.</p>\n\n<p>Retorna uma lista de objetos evento nos quais a participa\u00e7\u00e3o do\nparlamentar era ou \u00e9 prevista.\nSe n\u00e3o forem passados par\u00e2metros de tempo, s\u00e3o retornados os eventos\nnum per\u00edodo de cinco dias, sendo dois antes e dois depois do dia da\nrequisi\u00e7\u00e3o.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>legislatura</strong> (int, optional):\nN\u00famero da legislatura a qual os dados buscados devem corresponder.</li>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='dataHoraInicio'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "legislatura", "inicio", "fim", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Deputado.frentes", "modulename": "DadosAbertosBrasil.camara", "qualname": "Deputado.frentes", "type": "function", "doc": "<p>As frentes parlamentares das quais um deputado \u00e9 integrante.</p>\n\n<p>Retorna uma lista de informa\u00e7\u00f5es b\u00e1sicas sobre as frentes\nparlamentares das quais o parlamentar seja membro, ou, no caso de\nfrentes existentes em legislaturas anteriores, tenha encerrado a\nlegislatura como integrante.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Deputado.ocupacoes", "modulename": "DadosAbertosBrasil.camara", "qualname": "Deputado.ocupacoes", "type": "function", "doc": "<p>Os empregos e atividades que o(a) deputado(a) j\u00e1 teve.</p>\n\n<p>Enumera as atividades profissionais ou ocupacionais que o deputado\nj\u00e1 teve em sua carreira e declarou \u00e0 C\u00e2mara dos Deputados.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Deputado.orgaos", "modulename": "DadosAbertosBrasil.camara", "qualname": "Deputado.orgaos", "type": "function", "doc": "<p>Os \u00f3rg\u00e3os dos quais um deputado \u00e9 integrante.</p>\n\n<p>Retorna uma lista de \u00f3rg\u00e3os, como as comiss\u00f5es e procuradorias,\ndos quais o deputado participa ou participou durante um intervalo\nde tempo.\nCada item identifica um \u00f3rg\u00e3o, o cargo ocupado pelo parlamentar neste\n\u00f3rg\u00e3o (como presidente, vice-presidente, titular ou suplente) e as\ndatas de in\u00edcio e fim da ocupa\u00e7\u00e3o deste cargo.\nSe n\u00e3o for passado algum par\u00e2metro de tempo, s\u00e3o retornados os \u00f3rg\u00e3os\nocupados pelo parlamentar no momento da requisi\u00e7\u00e3o. Neste caso a\nlista ser\u00e1 vazia se o deputado n\u00e3o estiver em exerc\u00edcio.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='dataInicio'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "inicio", "fim", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Deputado.profissoes", "modulename": "DadosAbertosBrasil.camara", "qualname": "Deputado.profissoes", "type": "function", "doc": "<p>As frentes parlamentares das quais um deputado \u00e9 integrante.</p>\n\n<p>Retorna uma lista de dados sobre profiss\u00f5es que o parlamentar declarou\n\u00e0 C\u00e2mara que j\u00e1 exerceu ou que pode exercer pela sua forma\u00e7\u00e3o e/ou\nexperi\u00eancia.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Evento", "modulename": "DadosAbertosBrasil.camara", "qualname": "Evento", "type": "class", "doc": "<p>Retorna um conjunto detalhado de informa\u00e7\u00f5es sobre o evento da C\u00e2mara.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico do evento do qual se deseja informa\u00e7\u00f5es.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nConjunto completo de dados.</li>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico do evento.</li>\n<li><strong>andar</strong> (str):\nAndar do pr\u00e9dio onde ocorreu o evento.</li>\n<li><strong>descricao</strong> (str):\nDescri\u00e7\u00e3o do evento.</li>\n<li><strong>descricao_tipo</strong> (str):\nTipo do evento.</li>\n<li><strong>fases</strong> (str):\nFases do evento.</li>\n<li><strong>fim</strong> (str):\nData e hor\u00e1rio que o evento foi finalizado no formato 'AAAA-MM-DD'.</li>\n<li><strong>inicio</strong> (str):\nData e hor\u00e1rio que o evento foi iniciado no formato 'AAAA-MM-DD'.</li>\n<li><strong>local</strong> (str):\nLocal onde ocorreu o evento.</li>\n<li><strong>local_externo</strong> (str):\nLocal externo do evento.</li>\n<li><strong>lista_orgaos</strong> (list of dict):\nLista de org\u00e3os e informa\u00e7\u00f5es sobre os mesmos.</li>\n<li><strong>predio</strong> (str):\nPr\u00e9dio que ocorreu o evento.</li>\n<li><strong>requerimentos</strong> (list of dict):\nRequerimentos do evento.</li>\n<li><strong>sala</strong> (str):\nSala do pr\u00e9dio onde ocorreu o evento.</li>\n<li><strong>situacao</strong> (str):\nSitua\u00e7\u00e3o do evento.</li>\n<li><strong>uri</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API do evento.</li>\n<li><strong>uri_convidados</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API dos convidados.</li>\n<li><strong>uri_deputados</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API dos deputados.</li>\n<li><strong>url_documento_pauta</strong> (str):\nEndere\u00e7o URL para visualizar a pauta do evento.</li>\n<li><strong>url_registro</strong> (str):\nEndere\u00e7o URL onde o evento foi registrado.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>deputados()\n    Os deputados participantes do evento.\norgaos()\n    Lista de \u00f3rg\u00e3os organizadores do evento.\npauta()\n    Lista de proposi\u00e7\u00f5es que foram ou dever\u00e3o ser avaliadas.\nvotacoes()\n    Informa\u00e7\u00f5es detalhadas de vota\u00e7\u00f5es sobre o evento.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Obter a URL para assistir ao evento #59265.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">camara</span><span class=\"o\">.</span><span class=\"n\">Evento</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"mi\">59265</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">url_registro</span>\n<span class=\"gp\">... </span><span class=\"s1\">&#39;https://www.youtube.com/watch?v=8D2gjMrTnMA&#39;</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil.camara.Evento.__init__", "modulename": "DadosAbertosBrasil.camara", "qualname": "Evento.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cod"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Evento.deputados", "modulename": "DadosAbertosBrasil.camara", "qualname": "Evento.deputados", "type": "function", "doc": "<p>Os deputados participantes do evento.</p>\n\n<p>Retorna uma lista de dados resumidos sobre deputados participantes do\nevento. Se o evento j\u00e1 ocorreu, a lista identifica os deputados que\nefetivamente registraram presen\u00e7a no evento. Se o evento ainda n\u00e3o\nocorreu, a lista mostra os deputados que devem participar do evento,\npor serem convidados ou por serem membros do(s) \u00f3rg\u00e3o(s) respons\u00e1vel\npelo evento.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Evento.orgaos", "modulename": "DadosAbertosBrasil.camara", "qualname": "Evento.orgaos", "type": "function", "doc": "<p>Lista de \u00f3rg\u00e3os organizadores do evento.</p>\n\n<p>Retorna uma lista em que cada item \u00e9 um conjunto m\u00ednimo de dados sobre\no(s) \u00f3rg\u00e3o(s) respons\u00e1vel(is) pelo evento.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Evento.pauta", "modulename": "DadosAbertosBrasil.camara", "qualname": "Evento.pauta", "type": "function", "doc": "<p>Lista de proposi\u00e7\u00f5es que foram ou dever\u00e3o ser avaliadas em um evento\nde car\u00e1ter deliberativo.</p>\n\n<p>Se o evento for de car\u00e1ter deliberativo (uma reuni\u00e3o ordin\u00e1ria,\npor exemplo) este servi\u00e7o retorna a lista de proposi\u00e7\u00f5es previstas\npara avalia\u00e7\u00e3o pelos parlamentares. Cada item identifica, se as\ninforma\u00e7\u00f5es estiverem dispon\u00edveis, a proposi\u00e7\u00e3o avaliada, o regime\nde prefer\u00eancia para avalia\u00e7\u00e3o, o relator e seu parecer, o resultado\nda aprecia\u00e7\u00e3o e a vota\u00e7\u00e3o realizada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>ordem</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Evento.votacoes", "modulename": "DadosAbertosBrasil.camara", "qualname": "Evento.votacoes", "type": "function", "doc": "<p>Informa\u00e7\u00f5es detalhadas de vota\u00e7\u00f5es sobre o evento.</p>\n\n<p>Retorna uma lista de dados b\u00e1sicos sobre vota\u00e7\u00f5es que tenham sido\nrealizadas no evento. Vota\u00e7\u00f5es s\u00f3 ocorrem em eventos de car\u00e1ter\ndeliberativo. Dados complementares sobre cada vota\u00e7\u00e3o listada podem\nser obtidos no recurso.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Frente", "modulename": "DadosAbertosBrasil.camara", "qualname": "Frente", "type": "class", "doc": "<p>Informa\u00e7\u00f5es detalhadas sobre uma frente parlamentar.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico da frente parlamentar da qual se deseja informa\u00e7\u00f5es.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nConjunto completo de dados.</li>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico da frente parlamentar.</li>\n<li><strong>coordenador</strong> (dict):\nInforma\u00e7\u00f5es do(a) coordenador(a) da frente parlamentar.</li>\n<li><strong>documento</strong> (str):\nURL do documento da frente parlamentar.</li>\n<li><strong>email</strong> (str):\nE-mail de contato.</li>\n<li><strong>id_sitacao</strong> (int):\nID da situa\u00e7\u00e3o da frente parlamentar.</li>\n<li><strong>keywords</strong> (str):\nPalavras-chaves da frente parlamentar.</li>\n<li><strong>legislatura</strong> (int):\nID da legislatura da frente parlamentar.</li>\n<li><strong>situacao</strong> (str):\nSitua\u00e7\u00e3o da frente parlamentar.</li>\n<li><strong>telefone</strong> (str):\nTelefone de contato.</li>\n<li><strong>titulo</strong> (str):\nT\u00edtulo da frente parlamentar.</li>\n<li><strong>uri</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API da frente parlamentar.</li>\n<li><strong>website</strong> (str):\nURL do website da frente parlamentar.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>membros()\n    Os deputados que participam da frente parlamentar.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Obter t\u00edtulo da frente parlamentar #54258.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fr</span> <span class=\"o\">=</span> <span class=\"n\">camara</span><span class=\"o\">.</span><span class=\"n\">Frente</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"mi\">54258</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fr</span><span class=\"o\">.</span><span class=\"n\">url_registro</span>\n<span class=\"gp\">... </span><span class=\"s1\">&#39;Frente Parlamentar Mista da Telessa\u00fade&#39;</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil.camara.Frente.__init__", "modulename": "DadosAbertosBrasil.camara", "qualname": "Frente.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cod"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Frente.membros", "modulename": "DadosAbertosBrasil.camara", "qualname": "Frente.membros", "type": "function", "doc": "<p>Os deputados que participam da frente parlamentar.</p>\n\n<p>Uma lista dos deputados participantes da frente parlamentar e os\npap\u00e9is que exerceram nessa frente (signat\u00e1rio, coordenador ou\npresidente). Observe que, mesmo no caso de frentes parlamentares\nmistas (compostas por deputados e senadores), s\u00e3o retornados apenas\ndados sobre os deputados.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Legislatura", "modulename": "DadosAbertosBrasil.camara", "qualname": "Legislatura", "type": "class", "doc": "<p>Informa\u00e7\u00f5es extras sobre uma determinada legislatura da C\u00e2mara.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico da legislatura da qual se deseja informa\u00e7\u00f5es.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nConjunto completo de dados.</li>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico da legislatura.</li>\n<li><strong>inicio</strong> (str):\nPrimeiro dia da legislatura.</li>\n<li><strong>fim</strong> (str):\n\u00daltimo dia da legislatura.</li>\n<li><strong>uri</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API da legislatura.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Obter o primeiro e \u00faltimo dia da legislatura #56.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">leg</span> <span class=\"o\">=</span> <span class=\"n\">camara</span><span class=\"o\">.</span><span class=\"n\">Legislatura</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"mi\">54</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">leg</span><span class=\"o\">.</span><span class=\"n\">inicio</span>\n<span class=\"gp\">... </span><span class=\"s1\">&#39;2011-02-01&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">leg</span><span class=\"o\">.</span><span class=\"n\">fim</span>\n<span class=\"gp\">... </span><span class=\"s1\">&#39;2015-01-31&#39;</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil.camara.Legislatura.__init__", "modulename": "DadosAbertosBrasil.camara", "qualname": "Legislatura.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cod"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Legislatura.mesa", "modulename": "DadosAbertosBrasil.camara", "qualname": "Legislatura.mesa", "type": "function", "doc": "<p>Quais deputados fizeram parte da Mesa Diretora em uma legislatura.</p>\n\n<p>Retorna uma lista com dados b\u00e1sicos sobre todos os deputados que\nocuparam algum posto na Mesa Diretora da C\u00e2mara em algum per\u00edodo de\ntempo dentro da legislatura. Normalmente, cada legislatura tem duas\nMesas Diretoras, com presidente, dois vice-presidentes, quatro\nsecret\u00e1rios parlamentares e os suplentes dos secret\u00e1rios.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inicio</strong> (str, optional):\nDia de in\u00edcio do intervalo de tempo do qual se deseja saber a\ncomposi\u00e7\u00e3o da Mesa, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino do intervalo de tempo do qual se deseja saber a\ncomposi\u00e7\u00e3o da Mesa, no formato 'AAAA-MM-DD'.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "inicio", "fim", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Orgao", "modulename": "DadosAbertosBrasil.camara", "qualname": "Orgao", "type": "class", "doc": "<p>Informa\u00e7\u00f5es detalhadas sobre um \u00f3rg\u00e3o da C\u00e2mara.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico do \u00f3rg\u00e3o do qual se deseja informa\u00e7\u00f5es.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nConjunto completo de dados.</li>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico do \u00f3rg\u00e3o.</li>\n<li><strong>apelido</strong> (str):\nApelido do \u00f3rg\u00e3o.</li>\n<li><strong>casa</strong> (str):\nCasa do \u00f3rg\u00e3o.</li>\n<li><strong>cod_tipo</strong> (int):\nC\u00f3digo do tipo do \u00f3rg\u00e3o.</li>\n<li><strong>fim</strong> (str):\nData final do \u00f3rg\u00e3o.</li>\n<li><strong>inicio</strong> (str):\nData inicial do \u00f3rg\u00e3o.</li>\n<li><strong>instalacao</strong> (str):\nData de instala\u00e7\u00e3o do \u00f3rg\u00e3o.</li>\n<li><strong>nome</strong> (str):\nNome do \u00f3rg\u00e3o.</li>\n<li><strong>nome_publicacao</strong> (str):\nNome de publica\u00e7\u00e3o.</li>\n<li><strong>sala</strong> (str):\nSala do \u00f3rg\u00e3o.</li>\n<li><strong>sigla</strong> (str):\nSigla do \u00f3rg\u00e3o.</li>\n<li><strong>tipo</strong> (str):\nTipo do \u00f3rg\u00e3o.</li>\n<li><strong>uri</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API do \u00f3rg\u00e3o.</li>\n<li><strong>urlWebsite</strong> (str):\nURL para acessar o website do \u00f3rg\u00e3o.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Obter o apelido do \u00f3rg\u00e3o #4.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">org</span> <span class=\"o\">=</span> <span class=\"n\">camara</span><span class=\"o\">.</span><span class=\"n\">Orgao</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">org</span><span class=\"o\">.</span><span class=\"n\">apelido</span>\n<span class=\"gp\">... </span><span class=\"s1\">&#39;Mesa Diretora&#39;</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil.camara.Orgao.__init__", "modulename": "DadosAbertosBrasil.camara", "qualname": "Orgao.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cod"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Orgao.eventos", "modulename": "DadosAbertosBrasil.camara", "qualname": "Orgao.eventos", "type": "function", "doc": "<p>Os eventos ocorridos ou previstos em um \u00f3rg\u00e3o legislativo.</p>\n\n<p>Retorna uma lista de informa\u00e7\u00f5es resumidas dos eventos realizados\n(ou a realizar) pelo \u00f3rg\u00e3o legislativo. Por padr\u00e3o, s\u00e3o retornados\neventos em andamento ou previstos para o mesmo dia, dois dias antes\ne dois dias depois da requisi\u00e7\u00e3o. Par\u00e2metros podem ser passados para\nalterar esse per\u00edodo, bem como os tipos de eventos.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tipo_evento</strong> (str, optional):\nIdentificador num\u00e9rico do tipo de evento que se deseja obter.</li>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='dataHoraInicio'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>id</code> como index do DataFrame.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Lista de discursos feitos por um deputado em eventos diversos.</li>\n</ul>\n", "parameters": ["self", "tipo_evento", "inicio", "fim", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Orgao.membros", "modulename": "DadosAbertosBrasil.camara", "qualname": "Orgao.membros", "type": "function", "doc": "<p>Lista de cargos de um \u00f3rg\u00e3o e parlamentares que os ocupam.</p>\n\n<p>Retorna uma lista de dados resumidos que identificam cada parlamentar\ne o cargo ou posi\u00e7\u00e3o que ocupa ou ocupou no \u00f3rg\u00e3o parlamentar durante\num certo per\u00edodo de tempo. Se n\u00e3o forem passados par\u00e2metros que\ndelimitem esse per\u00edodo, o servi\u00e7o retorna os membros do \u00f3rg\u00e3o no\nmomento da requisi\u00e7\u00e3o. Se o \u00f3rg\u00e3o n\u00e3o existir mais ou n\u00e3o estiver\ninstalado, \u00e9 retornada uma lista vazia.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na \u201cp\u00e1gina\u201d que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "inicio", "fim", "pagina", "itens", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Orgao.votacoes", "modulename": "DadosAbertosBrasil.camara", "qualname": "Orgao.votacoes", "type": "function", "doc": "<p>Uma lista de eventos com a participa\u00e7\u00e3o do parlamentar.</p>\n\n<p>Retorna uma lista de dados b\u00e1sicos de vota\u00e7\u00f5es que tenham sido\nrealizadas em eventos realizados no \u00f3rg\u00e3o. Se este for um \u00f3rg\u00e3o\npermanente da C\u00e2mara, s\u00e3o retornados, por padr\u00e3o, dados sobre as\nvota\u00e7\u00f5es realizadas pelo \u00f3rg\u00e3o nos \u00faltimos 30 dias. Esse per\u00edodo pode\nser alterado com o uso dos par\u00e2metros <code>inicio</code> e/ou <code>fim</code>, que por\nenquanto s\u00e3o limitados a selecionar somente vota\u00e7\u00f5es ocorridas em um\nmesmo ano.\nCaso este seja um \u00f3rg\u00e3o tempor\u00e1rio, como uma comiss\u00e3o especial, s\u00e3o\nlistadas por padr\u00e3o todas as vota\u00e7\u00f5es ocorridas no \u00f3rg\u00e3o, em qualquer\nper\u00edodo de tempo.\nDados complementares sobre cada vota\u00e7\u00e3o listada podem ser obtidos com\no objeto <code>camara.Votacao</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>proposicao</strong> (int, optional):\nC\u00f3digo num\u00e9rico da proposi\u00e7\u00e3o, que podem ser obtidos por meio da\nfun\u00e7\u00e3o <code>camara.lista_proposicoes</code>. Se presente, listar\u00e1 as\nvota\u00e7\u00f5es que tiveram a proposi\u00e7\u00e3o como objeto de vota\u00e7\u00e3o ou que\nafetaram as proposi\u00e7\u00f5es listadas.</li>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=False):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='dataHoraRegistro'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "proposicao", "inicio", "fim", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Partido", "modulename": "DadosAbertosBrasil.camara", "qualname": "Partido", "type": "class", "doc": "<p>Informa\u00e7\u00f5es detalhadas sobre um partido.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico do partido do qual se deseja informa\u00e7\u00f5es.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nConjunto completo de dados.</li>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico do partido.</li>\n<li><strong>facebook</strong> (str):\nURL da p\u00e1gina no Facebook do partido.</li>\n<li><strong>legislatura</strong> (str):\nC\u00f3digo num\u00e9rico da \u00faltima legislatura.</li>\n<li><strong>lider</strong> (dict):\nInforma\u00e7\u00f5es sobre o l\u00edder do partido.</li>\n<li><strong>logo</strong> (str):\nURL da logo do partido.</li>\n<li><strong>nome</strong> (str):\nNome completo do partido.</li>\n<li><strong>numero</strong> (int):\nN\u00famero eleitoral do partido.</li>\n<li><strong>sigla</strong> (str):\nSigla do partido.</li>\n<li><strong>situacao</strong> (str):\nSitua\u00e7\u00e3o do partido.</li>\n<li><strong>total_membros</strong> (str):\nTotal de membros do partido.</li>\n<li><strong>total_posse</strong> (str):\nTotal de posse do partido.</li>\n<li><strong>ultima_atualizacao</strong> (str):\n\u00daltima atualiza\u00e7\u00e3o das informa\u00e7\u00f5es sobre o partido.</li>\n<li><strong>uri</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API do partido.</li>\n<li><strong>uri_membros</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API dos membros do partido.</li>\n<li><strong>website</strong> (str):\nURL do website do partido.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Obter o nome completo do partido #36899.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">camara</span><span class=\"o\">.</span><span class=\"n\">Partido</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"mi\">36899</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">nome</span>\n<span class=\"gp\">... </span><span class=\"s1\">&#39;Movimento Democr\u00e1tico Brasileiro&#39;</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil.camara.Partido.__init__", "modulename": "DadosAbertosBrasil.camara", "qualname": "Partido.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cod"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Partido.membros", "modulename": "DadosAbertosBrasil.camara", "qualname": "Partido.membros", "type": "function", "doc": "<p>Uma lista dos parlamentares de um partido durante um per\u00edodo.</p>\n\n<p>Retorna uma lista de deputados que est\u00e3o ou estiveram em exerc\u00edcio\npelo partido. Opcionalmente, pode-se usar os par\u00e2metros <code>inicio</code>,\n<code>fim</code> ou <code>legislatura</code> para se obter uma lista de deputados filiados\nao partido num certo intervalo de tempo. Isso \u00e9 equivalente \u00e0 fun\u00e7\u00e3o\n<code>lista_deputados</code> com filtro por partido, mas \u00e9 melhor para obter\ninforma\u00e7\u00f5es sobre membros de partidos j\u00e1 extintos.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>legislatura</strong> (int, optional):\nN\u00famero da legislatura, \u00e0 qual os dados buscados devem corresponder.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, optional):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "inicio", "fim", "legislatura", "pagina", "itens", "ordenar_por", "asc", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Proposicao", "modulename": "DadosAbertosBrasil.camara", "qualname": "Proposicao", "type": "class", "doc": "<p>Informa\u00e7\u00f5es detalhadas sobre uma proposi\u00e7\u00e3o espec\u00edfica.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico da proposi\u00e7\u00e3o da qual se deseja informa\u00e7\u00f5es.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nConjunto completo de dados.</li>\n<li><strong>cod</strong> (int):\nC\u00f3digo num\u00e9rico da proposi\u00e7\u00e3o.</li>\n<li><strong>uri</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API da proposi\u00e7\u00e3o.</li>\n<li><strong>tipo_sigla</strong> (str):\nSigla do tipo de proposi\u00e7\u00e3o.</li>\n<li><strong>tipo_codigo</strong> (int):\nC\u00f3digo num\u00e9rico do tipo de proposi\u00e7\u00e3o.</li>\n<li><strong>numero</strong> (int):\nN\u00famero da proposi\u00e7\u00e3o.</li>\n<li><strong>ano</strong> (int):\nAno da proposi\u00e7\u00e3o.</li>\n<li><strong>ementa</strong> (str):\nEmenta da proposi\u00e7\u00e3o.</li>\n<li><strong>apresentacao</strong> (str):\nHor\u00e1rio da apresenta\u00e7\u00e3o da proposi\u00e7\u00e3o no formato 'AAAA-MM-DD HH:MM'.</li>\n<li><strong>uri_orgao_numerador</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API do \u00f3rg\u00e3o numerador.</li>\n<li><strong>ultima_atualizacao</strong> (str):\nData da \u00faltima atualiza\u00e7\u00e3o do status da proposi\u00e7\u00e3o.</li>\n<li><strong>sequencia</strong> (int):\nSequ\u00eancia da proposi\u00e7\u00e3o.</li>\n<li><strong>sigla_orgao</strong> (str):\nSigla do \u00f3rg\u00e3o.</li>\n<li><strong>uri_orgao</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API do \u00f3rg\u00e3o.</li>\n<li><strong>uri_ultimo_relator</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API do \u00faltimo relaltor.</li>\n<li><strong>regime</strong> (str):\nRegime da proposi\u00e7\u00e3o.</li>\n<li><strong>descricao_tramitacao</strong> (str):\nDescri\u00e7\u00e3o da tramita\u00e7\u00e3o.</li>\n<li><strong>cod_tipo_tramitacao</strong> (str):\nC\u00f3digo do tipo da tramita\u00e7\u00e3o.</li>\n<li><strong>descricao_situacao</strong> (str):\nDescri\u00e7\u00e3o da situa\u00e7\u00e3o da proposi\u00e7\u00e3o.</li>\n<li><strong>cod_situacao</strong> (int):\nC\u00f3digo n\u00famerico da situa\u00e7\u00e3o da proposi\u00e7\u00e3o.</li>\n<li><strong>despacho</strong> (str):\nDespacho.</li>\n<li><strong>url</strong> (str):\nURL da proposi\u00e7\u00e3o.</li>\n<li><strong>ambito</strong> (str):\n\u00c2mbito da proposi\u00e7\u00e3o.</li>\n<li><strong>uri_autores</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API dos autores.</li>\n<li><strong>descricao_tipo</strong> (str):\nDescri\u00e7\u00e3o do tipo da proposi\u00e7\u00e3o.</li>\n<li><strong>ementa_detalhada</strong> (str):\nEmenta detalhada da proposi\u00e7\u00e3o.</li>\n<li><strong>keywords</strong> (str):\nPalavras-chaves da proposi\u00e7\u00e3o.</li>\n<li><strong>uri_proposicao_principal</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API da proposi\u00e7\u00e3o principal.</li>\n<li><strong>uri_proposicao_anterior</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API da proposi\u00e7\u00e3o anterior.</li>\n<li><strong>uri_proposicao_posterior</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API da proposi\u00e7\u00e3o posterior.</li>\n<li><strong>url_inteiro_teor</strong> (str):\nURL do inteiro teor.</li>\n<li><strong>urn_final</strong> (str):\nURN final.</li>\n<li><strong>texto</strong> (str):\nTexto da proposi\u00e7\u00e3o.</li>\n<li><strong>justificativa</strong> (str):\nJustificativa da proposi\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Obter a ementa da proposi\u00e7\u00e3o #15990.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prop</span> <span class=\"o\">=</span> <span class=\"n\">camara</span><span class=\"o\">.</span><span class=\"n\">Proposicao</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"mi\">15990</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prop</span><span class=\"o\">.</span><span class=\"n\">ementa</span>\n<span class=\"gp\">... </span><span class=\"s1\">&#39;&#39;</span><span class=\"n\">Cria</span> <span class=\"n\">salvaguardas</span> <span class=\"n\">para</span> <span class=\"n\">a</span> <span class=\"n\">tecnologia</span> <span class=\"n\">no</span> <span class=\"n\">campo</span> <span class=\"n\">nuclear</span><span class=\"o\">...</span><span class=\"s1\">&#39;</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil.camara.Proposicao.__init__", "modulename": "DadosAbertosBrasil.camara", "qualname": "Proposicao.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cod"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Proposicao.autores", "modulename": "DadosAbertosBrasil.camara", "qualname": "Proposicao.autores", "type": "function", "doc": "<p>Lista pessoas e/ou entidades autoras da proposi\u00e7\u00e3o.</p>\n\n<p>Retorna uma lista em que cada item identifica uma pessoa ou entidade\nque \u00e9 autora da proposi\u00e7\u00e3o. Al\u00e9m de deputados, tamb\u00e9m podem ser\nautores de proposi\u00e7\u00f5es os senadores, a sociedade civil, assembleias\nlegislativas e os poderes Executivo e Judici\u00e1rio.\nPelo Regimento da C\u00e2mara, todos os que assinam uma proposi\u00e7\u00e3o s\u00e3o\nconsiderados autores (art. 102), tanto os proponentes quanto os\napoiadores.\nPara obter mais informa\u00e7\u00f5es sobre cada autor, \u00e9 recomend\u00e1vel acessar,\nse dispon\u00edvel, a URL que \u00e9 valor do campo uri.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "url", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Proposicao.relacionadas", "modulename": "DadosAbertosBrasil.camara", "qualname": "Proposicao.relacionadas", "type": "function", "doc": "<p>Uma lista de proposi\u00e7\u00f5es relacionadas a uma em especial.</p>\n\n<p>Lista de informa\u00e7\u00f5es b\u00e1sicas sobre proposi\u00e7\u00f5es que de alguma forma se\nrelacionam com a proposi\u00e7\u00e3o, como pareceres, requerimentos,\nsubstitutivos, etc.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Proposicao.temas", "modulename": "DadosAbertosBrasil.camara", "qualname": "Proposicao.temas", "type": "function", "doc": "<p>Lista de \u00e1reas tem\u00e1ticas de uma proposi\u00e7\u00e3o.</p>\n\n<p>Lista em que cada item traz informa\u00e7\u00f5es sobre uma \u00e1rea tem\u00e1tica \u00e0 qual\na proposi\u00e7\u00e3o se relaciona, segundo classifica\u00e7\u00e3o oficial do Centro de\nDocumenta\u00e7\u00e3o e Informa\u00e7\u00e3o da C\u00e2mara.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Proposicao.tramitacoes", "modulename": "DadosAbertosBrasil.camara", "qualname": "Proposicao.tramitacoes", "type": "function", "doc": "<p>O hist\u00f3rico de passos na tramita\u00e7\u00e3o de uma proposta.</p>\n\n<p>Lista que traz, como cada item, um \u201cretrato\u201d de informa\u00e7\u00f5es que podem\nser alteradas a cada etapa de tramita\u00e7\u00e3o na vida da proposi\u00e7\u00e3o (como\nregime de tramita\u00e7\u00e3o e situa\u00e7\u00e3o) e informa\u00e7\u00f5es sobre o que causou esse\nnovo estado. Esta representa\u00e7\u00e3o das tramita\u00e7\u00f5es ainda \u00e9 provis\u00f3ria.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inicio</strong> (datetime.datetime or str, optional):\nData de in\u00edcio da tramita\u00e7\u00e3o, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (datetime.datetime or str, optional):\nData de t\u00e9rmino da tramita\u00e7\u00e3o, no formato 'AAAA-MM-DD'.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>sequencia</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "inicio", "fim", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Proposicao.votacoes", "modulename": "DadosAbertosBrasil.camara", "qualname": "Proposicao.votacoes", "type": "function", "doc": "<p>Informa\u00e7\u00f5es detalhadas de vota\u00e7\u00f5es sobre a proposi\u00e7\u00e3o.</p>\n\n<p>Retorna uma lista de identificadores b\u00e1sicos sobre as vota\u00e7\u00f5es na\nC\u00e2mara que tiveram a proposi\u00e7\u00e3o como objeto ou como afetada pelos seus\nresultados. Dados complementares sobre cada vota\u00e7\u00e3o listada podem ser\nobtidos pelo objeto <code>camara.Votacao</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>asc</strong> (bool, default=False):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='dataHoraRegistro'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Votacao", "modulename": "DadosAbertosBrasil.camara", "qualname": "Votacao", "type": "class", "doc": "<p>Informa\u00e7\u00f5es detalhadas sobre uma vota\u00e7\u00e3o da C\u00e2mara.</p>\n\n<p>Retorna um conjunto detalhado de dados sobre a vota\u00e7\u00e3o, tais como as\nproposi\u00e7\u00f5es que podem ter sido o objeto da vota\u00e7\u00e3o e os efeitos de\ntramita\u00e7\u00e3o de outras proposi\u00e7\u00f5es que eventualmente tenham sido cadastrados\nem consequ\u00eancia desta vota\u00e7\u00e3o.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (str):\nC\u00f3digo alfa-num\u00e9rico da vota\u00e7\u00e3o da qual se deseja informa\u00e7\u00f5es.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nConjunto completo de dados.</li>\n<li><strong>cod</strong> (str):\nC\u00f3digo alfa-num\u00e9rico da vota\u00e7\u00e3o.</li>\n<li><strong>aprovacao</strong> (int):\nAprova\u00e7\u00e3o da vota\u00e7\u00e3o.</li>\n<li><strong>data</strong> (str):\nData da vota\u00e7\u00e3o.</li>\n<li><strong>data_regitro</strong> (str):\nData e hor\u00e1rio de registro da vota\u00e7\u00e3o.</li>\n<li><strong>data_ultima_abertura</strong> (str):\nData e hor\u00e1rio da \u00faltima abertura da vota\u00e7\u00e3o.</li>\n<li><strong>descricao</strong> (str):\nDescri\u00e7\u00e3o da vota\u00e7\u00e3o.</li>\n<li><strong>efeitos_registrados</strong> (list):\nLista de efeitos registrados.</li>\n<li><strong>evento</strong> (int):\nC\u00f3digo num\u00e9rico do evento da vota\u00e7\u00e3o.</li>\n<li><strong>orgao</strong> (int):\nC\u00f3digo num\u00e9rico do \u00f3rg\u00e3o da vota\u00e7\u00e3o.</li>\n<li><strong>objetos_possiveis</strong> (list of dict):\nLista de objetos poss\u00edveis.</li>\n<li><strong>proposicoes_afetadas</strong> (str):\nProposi\u00e7\u00f5es afetadas.</li>\n<li><strong>sigla_orgao</strong> (str):\nSigla do \u00f3rg\u00e3o.</li>\n<li><strong>ultima_apresentacao_proposicao</strong> (dict):\n\u00daltima apresenta\u00e7\u00e3o da proposi\u00e7\u00e3o.</li>\n<li><strong>uri</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API da vota\u00e7\u00e3o.</li>\n<li><strong>uri_evento</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API do evento.</li>\n<li><strong>uri_orgao</strong> (str):\nEndere\u00e7o para coleta de dados direta pela API do \u00f3rg\u00e3o.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Obter a data da vota\u00e7\u00e3o #2265603-43.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vot</span> <span class=\"o\">=</span> <span class=\"n\">camara</span><span class=\"o\">.</span><span class=\"n\">Votacao</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"s1\">&#39;2265603-43&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vot</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"gp\">... </span><span class=\"s1\">&#39;2020-12-22&#39;</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil.camara.Votacao.__init__", "modulename": "DadosAbertosBrasil.camara", "qualname": "Votacao.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cod"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Votacao.orientacoes", "modulename": "DadosAbertosBrasil.camara", "qualname": "Votacao.orientacoes", "type": "function", "doc": "<p>O voto recomendado pelas lideran\u00e7as aos seus deputados na vota\u00e7\u00e3o.</p>\n\n<p>Em muitas vota\u00e7\u00f5es, os l\u00edderes de partidos e blocos \u2013 as bancadas \u2013\nfazem recomenda\u00e7\u00f5es de voto para seus parlamentares. Essas orienta\u00e7\u00f5es\nde uma vota\u00e7\u00e3o tamb\u00e9m s\u00e3o feitas pelas lideran\u00e7as de Governo, Minoria\ne as mais recentes Maioria e Oposi\u00e7\u00e3o. Uma lideran\u00e7a tamb\u00e9m pode\nliberar a bancada para que cada deputado vote como quiser, ou entrar\nem obstru\u00e7\u00e3o, para que seus parlamentares n\u00e3o sejam contados para o\nqu\u00f3rum da vota\u00e7\u00e3o.\nSe a vota\u00e7\u00e3o teve orienta\u00e7\u00f5es, este recurso retorna uma lista em que\ncada item cont\u00e9m os identificadores de um partido, bloco ou lideran\u00e7a,\ne o posicionamento ou voto que foi recomendado aos seus parlamentares.\nAt\u00e9 o momento, s\u00f3 est\u00e3o dispon\u00edveis dados sobre orienta\u00e7\u00f5es dadas em\nvota\u00e7\u00f5es no Plen\u00e1rio.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.Votacao.votos", "modulename": "DadosAbertosBrasil.camara", "qualname": "Votacao.votos", "type": "function", "doc": "<p>Como cada parlamentar votou em uma vota\u00e7\u00e3o nominal e aberta.</p>\n\n<p>Se a vota\u00e7\u00e3o da C\u00e2mara \u00e9 nominal e n\u00e3o foi secreta, retorna uma lista\nem que cada item cont\u00e9m os identificadores b\u00e1sicos de um deputado e o\nvoto ou posicionamento que ele registrou.\nO resultado \u00e9 uma lista vazia se a vota\u00e7\u00e3o foi uma vota\u00e7\u00e3o simb\u00f3lica,\nem que os votos individuais n\u00e3o s\u00e3o contabilizados. Mas h\u00e1 algumas\nvota\u00e7\u00f5es simb\u00f3licas que tamb\u00e9m t\u00eam registros de \"votos\": nesses casos,\nnormalmente se trata de parlamentares que pediram expressamente que\nseus posicionamentos fossem registrados.\nN\u00e3o s\u00e3o listados parlamentares ausentes \u00e0 vota\u00e7\u00e3o.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "url", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.lista_blocos", "modulename": "DadosAbertosBrasil.camara", "qualname": "lista_blocos", "type": "function", "doc": "<p>Lista de dados sobre os blocos partid\u00e1rios.</p>\n\n<p>Nas atividades parlamentares, partidos podem se juntar em blocos\npartid\u00e1rios. Quando associados, os partidos passam a trabalhar como se\nfossem um \"partid\u00e3o\", com um s\u00f3 l\u00edder e um mesmo conjunto de vice-l\u00edderes.\nOs blocos s\u00f3 podem existir at\u00e9 o fim da legislatura em que foram criados:\nna legislatura seguinte, os mesmos partidos, se associados, formam um novo\nbloco. Este recurso \u00e9 uma lista dos blocos em atividade no momento da\nrequisi\u00e7\u00e3o. Se forem passados n\u00fameros de legislaturas com o par\u00e2metro\n<code>legislatura</code>, s\u00e3o listados tamb\u00e9m os blocos formados e extintos nessas\nlegislaturas.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>legislatura</strong> (int, optional):\nN\u00famero da legislatura a qual os dados buscados devem corresponder.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='nome'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["legislatura", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.lista_deputados", "modulename": "DadosAbertosBrasil.camara", "qualname": "lista_deputados", "type": "function", "doc": "<p>Listagem e busca de deputados, segundo crit\u00e9rios.</p>\n\n<p>Retorna uma lista de dados b\u00e1sicos sobre deputados que estiveram em\nexerc\u00edcio parlamentar em algum intervalo de tempo. Se n\u00e3o for passado um\npar\u00e2metro de tempo, como <code>legislatura</code> ou <code>inicio</code>, a lista enumerar\u00e1\nsomente os deputados em exerc\u00edcio no momento da requisi\u00e7\u00e3o.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nome</strong> (str, optional):\nParte do nome dos parlamentares.</li>\n<li><strong>legislatura</strong> (int, optional):\nN\u00famero da legislatura a qual os dados buscados devem corresponder.</li>\n<li><strong>uf</strong> (str, optional):\nSigla da unidade federativa (estados e Distrito Federal).\nSe None, ser\u00e3o retornados deputados de todos os estados.</li>\n<li><strong>partido</strong> (str, optional):\nSigla do partido ao qual sejam filiados os deputados.\nPara obter as siglas v\u00e1lidas, consulte a fun\u00e7\u00e3o <code>camara.lista_partidos</code>.\nAten\u00e7\u00e3o: partidos diferentes podem usar a mesma sigla em diferentes\nlegislaturas.</li>\n<li><strong>sexo</strong> ({'M', 'F'}, optional):\nLetra que designe o g\u00eanero dos parlamentares que se deseja buscar,\n<ul>\n<li>'M': Masculino;</li>\n<li>'F': Feminino.</li>\n</ul></li>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='nome'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["nome", "legislatura", "uf", "partido", "sexo", "inicio", "fim", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.lista_eventos", "modulename": "DadosAbertosBrasil.camara", "qualname": "lista_eventos", "type": "function", "doc": "<p>Lista de eventos ocorridos ou previstos nos diversos \u00f3rg\u00e3os da C\u00e2mara.</p>\n\n<p>Retorna uma lista cujos elementos trazem informa\u00e7\u00f5es b\u00e1sicas sobre eventos\ndos \u00f3rg\u00e3os legislativos da C\u00e2mara, previstos ou j\u00e1 ocorridos, em um certo\nintervalo de tempo. Esse intervalo pode ser configurado pelos par\u00e2metros\nde data e hora listados abaixo. Se nenhum for passado, s\u00e3o listados\neventos dos cinco dias anteriores, dos cinco dias seguintes e do pr\u00f3prio\ndia em que \u00e9 feita a requisi\u00e7\u00e3o.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tipo_evento</strong> (int, optional):\nIdentificador num\u00e9rico do tipo de evento que se deseja obter.\nOs valores v\u00e1lidos podem ser obtidos pela fun\u00e7\u00e3o\n<code>camara.referencias('tiposEvento')</code>.</li>\n<li><strong>situacao</strong> (int, optional):\nIdentificador num\u00e9ricos do tipo de situa\u00e7\u00e3o de evento.\nValores v\u00e1lidos podem ser obtidos pela fun\u00e7\u00e3o\n<code>camara.referencias('situacoesEvento')</code>.</li>\n<li><strong>tipo_orgao</strong> (int, optional):\nIdentificador num\u00e9rico do tipo de \u00f3rg\u00e3o realizador dos eventos que se\ndeseja obter. Os valores v\u00e1lidos podem ser obtidos pela fun\u00e7\u00e3o\n`camara.referencias('tiposOrgao').</li>\n<li><strong>orgao</strong> (int, optional):\nIdentificador num\u00e9rico do \u00f3rg\u00e3o. Os identificadores podem ser obtidos\npela fun\u00e7\u00e3o <code>camara.lista_orgaos</code>.</li>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>hora_inicio</strong> (str, optional):\nHora inicial de um intervalo de tempo, no formato 'HH:MM', em hor\u00e1rio\nde Bras\u00edlia.</li>\n<li><strong>hora_fim</strong> (str, optional):\nHora final de um intervalo de tempo, no formato 'HH:MM', em hor\u00e1rio\nde Bras\u00edlia.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='dataHoraInicio'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["tipo_evento", "situacao", "tipo_orgao", "orgao", "inicio", "fim", "hora_inicio", "hora_fim", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.lista_frentes", "modulename": "DadosAbertosBrasil.camara", "qualname": "lista_frentes", "type": "function", "doc": "<p>Lista de frentes parlamentares de uma ou mais legislaturas.</p>\n\n<p>Retorna uma lista de informa\u00e7\u00f5es sobre uma frente parlamentar - um\nagrupamento oficial de parlamentares em torno de um determinado tema ou\nproposta. As frentes existem at\u00e9 o fim da legislatura em que foram\ncriadas, e podem ser recriadas a cada legislatura. Algumas delas s\u00e3o\ncompostas por deputados e senadores.\nUm n\u00famero de legislatura pode ser passado como par\u00e2metro, mas se for\nomitido s\u00e3o retornadas todas as frentes parlamentares criadas desde 2003.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>legislatura</strong> (int, optional):\nN\u00famero da legislatura a qual os dados buscados devem corresponder.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["legislatura", "pagina", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.lista_legislaturas", "modulename": "DadosAbertosBrasil.camara", "qualname": "lista_legislaturas", "type": "function", "doc": "<p>Os per\u00edodos de mandatos e atividades parlamentares da C\u00e2mara.</p>\n\n<p>Legislatura \u00e9 o nome dado ao per\u00edodo de trabalhos parlamentares entre uma\nelei\u00e7\u00e3o e outra. Esta fun\u00e7\u00e3o retorna uma lista em que cada item cont\u00e9m as\ninforma\u00e7\u00f5es b\u00e1sicas sobre um desses per\u00edodos. Os n\u00fameros que identificam\nas legislaturas s\u00e3o sequenciais, desde a primeira que ocorreu.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (str, optional):\nData no formato 'AAAA-MM-DD'. Se este par\u00e2metro estiver presente, a\nfun\u00e7\u00e3o retornar\u00e1 as informa\u00e7\u00f5es b\u00e1sicas sobre a legislatura que estava\nem curso na data informada.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=False):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='id'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["data", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.lista_orgaos", "modulename": "DadosAbertosBrasil.camara", "qualname": "lista_orgaos", "type": "function", "doc": "<p>Lista das comiss\u00f5es e outros \u00f3rg\u00e3os legislativos da C\u00e2mara.</p>\n\n<p>Retorna uma lista de informa\u00e7\u00f5es b\u00e1sicas sobre os \u00f3rg\u00e3os legislativos e\nseus identificadores, tipos e descri\u00e7\u00f5es. \u00c9 poss\u00edvel filtrar a lista por\nidentificadores, tipos de \u00f3rg\u00e3os, sigla, situa\u00e7\u00e3o do \u00f3rg\u00e3o ou per\u00edodo de\ntempo em que os \u00f3rg\u00e3os estiveram ativos, se aplic\u00e1vel.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sigla</strong> (str, optional):\nSigla oficialmente usadas para designar o \u00f3rg\u00e3o da c\u00e2mara.</li>\n<li><strong>tipo</strong> (int, optional):\nC\u00f3digo num\u00e9rico do tipo de \u00f3rg\u00e3os que se deseja buscar dados. Pode ser\nobtido pela fun\u00e7\u00e3o <code>camara.referencias</code>.</li>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio, no formato 'AAAA-MM-DD', de um intervalo de tempo no\nqual os \u00f3rg\u00e3os buscados devem ter estado em atividade.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino, no formato 'AAAA-MM-DD', de um intervalo de tempo no\nqual os \u00f3rg\u00e3os buscados devem ter estado em atividade.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='id'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["sigla", "tipo", "inicio", "fim", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.lista_partidos", "modulename": "DadosAbertosBrasil.camara", "qualname": "lista_partidos", "type": "function", "doc": "<p>Os partidos pol\u00edticos que t\u00eam ou j\u00e1 tiveram parlamentares em exerc\u00edcio\nna C\u00e2mara.</p>\n\n<p>Retorna uma lista de dados b\u00e1sicos sobre os partidos pol\u00edticos que t\u00eam ou\nj\u00e1 tiveram deputados na C\u00e2mara. Se n\u00e3o forem passados par\u00e2metros, a fun\u00e7\u00e3o\nretorna os partidos que t\u00eam deputados em exerc\u00edcio no momento da\nrequisi\u00e7\u00e3o. \u00c9 poss\u00edvel obter uma lista de partidos representados na C\u00e2mara\nem um certo intervalo de datas ou de legislaturas.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>legislatura</strong> (int, optional):\nN\u00famero da legislatura a qual os dados buscados devem corresponder.</li>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='sigla'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["legislatura", "inicio", "fim", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.lista_proposicoes", "modulename": "DadosAbertosBrasil.camara", "qualname": "lista_proposicoes", "type": "function", "doc": "<p>Lista de proposi\u00e7\u00f5es na C\u00e2mara.</p>\n\n<p>Lista de informa\u00e7\u00f5es b\u00e1sicas sobre projetos de lei, resolu\u00e7\u00f5es, medidas\nprovis\u00f3rias, emendas, pareceres e todos os outros tipos de proposi\u00e7\u00f5es na\nC\u00e2mara. Por padr\u00e3o, s\u00e3o retornadas todas as proposi\u00e7\u00f5es que foram\napresentadas ou tiveram alguma mudan\u00e7a de situa\u00e7\u00e3o nos \u00faltimos 30 dias.\nEsse intervalo de tramita\u00e7\u00e3o pode ser configurado pelos par\u00e2metros\n<code>inicio</code> e <code>fim</code>.</p>\n\n<p>Se for(em) passado(s) um ou mais dos par\u00e2metros <code>id</code>, <code>ano</code>,\n<code>apresentacao_inicio</code>, <code>apresentacao_fim</code>, <code>autor_cod</code>, <code>autor_nome</code>,\no intervalo de tramita\u00e7\u00e3o s\u00f3 ser\u00e1 levado em considera\u00e7\u00e3o se os par\u00e2metros\n<code>inico</code> e/ou <code>fim</code> estiverem explicitamente configurados. Se n\u00e3o\nestiverem, poder\u00e3o ser listadas proposi\u00e7\u00f5es que n\u00e3o tiveram tramita\u00e7\u00e3o\nrecente (e a resposta pode demorar bastante).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tipo</strong> (str, optional):\nSigla do tipo das proposi\u00e7\u00f5es que se deseja obter. A lista de tipos e\nsiglas existentes pode ser obtida pela fun\u00e7\u00e3o <code>camara.referencias</code>.</li>\n<li><strong>numero</strong> (int, optional):\nN\u00famero oficialmente atribu\u00eddos \u00e0s proposi\u00e7\u00f5es segundo o art. 137 do\nRegimento Interno, como \u201cPL 1234/2016\u201d</li>\n<li><strong>ano</strong> (int, optional):\nAno de apresenta\u00e7\u00e3o das proposi\u00e7\u00f5es que ser\u00e3o listadas no formato\n'AAAA'.</li>\n<li><strong>autor_cod</strong> (int, optional):\nC\u00f3digo num\u00e9rico identificador do deputado autor das proposi\u00e7\u00f5es que\nser\u00e3o listadas.</li>\n<li><strong>autor_nome</strong> (str, optional):\nNome ou parte do nome do(s) autor(es) das proposi\u00e7\u00f5es que se deseja\nobter. Deve estar entre aspas.</li>\n<li><strong>partido_sigla</strong> (str, optional):\nSigla do partido a que perten\u00e7am os autores das proposi\u00e7\u00f5es a serem\nlistadas.</li>\n<li><strong>partido_cod</strong> (int, optional):\nIdentificador num\u00e9rico do partido a que perten\u00e7am os autores das\nproposi\u00e7\u00f5es que ser\u00e3o listadas. Esses identificadores podem ser\nobtidos pela fun\u00e7\u00e3o <code>camara.lista_partidos</code> e s\u00e3o mais precisos do\nque as siglas, que podem ser usadas por partidos diferentes em \u00e9pocas\ndiferentes.</li>\n<li><strong>autor_uf</strong> (str, optional):\nSigla da unidade da federa\u00e7\u00e3o (estados e Distrito Federal) pela qual\no(s) autor(es) das proposi\u00e7\u00f5es selecionadas tenha(m) sido eleito(s).</li>\n<li><strong>keyword</strong> (str, optional):\nPalavra-chave sobre o tema a que a proposi\u00e7\u00e3o se relaciona.</li>\n<li><strong>tramitacao_senado</strong> (bool, optional):\nBuscar proposi\u00e7\u00f5es que j\u00e1 tenha tramitado no Senado.</li>\n<li><strong>inicio</strong> (str, optional):\nData do in\u00edcio do intervalo de tempo em que tenha havido tramita\u00e7\u00e3o\ndas proposi\u00e7\u00f5es a serem listadas, no formato 'AAAA-MM-DD'. Se omitido,\n\u00e9 assumido como a data de 30 dias anteriores \u00e0 proposi\u00e7\u00e3o.</li>\n<li><strong>fim</strong> (str, optional):\nData do fim do intervalo de tempo em que tenha havido tramita\u00e7\u00e3o das\nproposi\u00e7\u00f5es a serem listadas. Se omitido, \u00e9 considerado ser o dia em\nque \u00e9 feita a requisi\u00e7\u00e3o.</li>\n<li><strong>apresentacao_inicio</strong> (str, optional):\nData do in\u00edcio do intervalo de tempo em que tenham sido apresentadas\nas proposi\u00e7\u00f5es a serem listadas, no formato 'AAAA-MM-DD'.</li>\n<li><strong>apresentacao_fim</strong> (str, optional):\nData do fim do intervalo de tempo em que tenham sido apresentadas as\nproposi\u00e7\u00f5es a serem listadas.</li>\n<li><strong>situacao</strong> (int, optional):\nC\u00f3digo num\u00e9rico do tipo de situa\u00e7\u00e3o em que se encontram as proposi\u00e7\u00f5es\nque ser\u00e3o listadas. As situa\u00e7\u00f5es poss\u00edveis podem ser obtidas pela\nfun\u00e7\u00e3o <code>camara.referencias</code>. Aten\u00e7\u00e3o: este par\u00e2metro pode apresentar\nresultados inesperados, por problemas com o registro dos dados.</li>\n<li><strong>tema</strong> (int, optional):\nC\u00f3digo num\u00e9rico das \u00e1reas tem\u00e1ticas das proposi\u00e7\u00f5es que ser\u00e3o\nlistadas. Os temas poss\u00edveis podem ser obtidos pela fun\u00e7\u00e3o\n<code>camara.referencias</code>.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='id'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["tipo", "numero", "ano", "autor_cod", "autor_nome", "partido_sigla", "partido_cod", "autor_uf", "keyword", "tramitacao_senado", "apresentacao_inicio", "apresentacao_fim", "situacao", "tema", "inicio", "fim", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.lista_votacoes", "modulename": "DadosAbertosBrasil.camara", "qualname": "lista_votacoes", "type": "function", "doc": "<p>Lista de vota\u00e7\u00f5es na C\u00e2mara.</p>\n\n<p>Retorna uma lista de informa\u00e7\u00f5es b\u00e1sicas sobre as vota\u00e7\u00f5es ocorridas em\neventos dos diversos \u00f3rg\u00e3os da C\u00e2mara. Se n\u00e3o forem passados par\u00e2metros\nque delimitem o intervalo de tempo da pesquisa, s\u00e3o retornados dados sobre\ntodas as vota\u00e7\u00f5es ocorridas nos \u00faltimos 30 dias, em eventos de todos os\n\u00f3rg\u00e3os.</p>\n\n<p>Os par\u00e2metros de data permitem estender o per\u00edodo, mas por enquanto \u00e9\nnecess\u00e1rio que as duas datas sejam de um mesmo ano. Quando apenas uma\ndelas est\u00e1 presente, s\u00e3o retornadas somente as vota\u00e7\u00f5es ocorridas no mesmo\nano, antes de <code>fim</code> ou ap\u00f3s <code>inicio</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>proposicao</strong> (int, optional):\nC\u00f3digo num\u00e9rico da proposi\u00e7\u00e3o, que podem ser obtidos pela fun\u00e7\u00e3o\n<code>camara.lista_proposi\u00e7\u00f5es</code>. Se presente, listar\u00e1 as vota\u00e7\u00f5es que\ntiveram a proposi\u00e7\u00e3o como objeto de vota\u00e7\u00e3o ou que afetaram as\nproposi\u00e7\u00f5es listadas.</li>\n<li><strong>evento</strong> (int, optional):\nC\u00f3digo num\u00e9rico do evento realizado na C\u00e2mara, no qual tenham sido\nrealizadas as vota\u00e7\u00f5es a serem listadas. Os c\u00f3digos podem ser obtidos\npela fun\u00e7\u00e3o <code>camara.lista_eventos</code>. Somente os eventos deliberativos\npodem ter vota\u00e7\u00f5es. Os eventos podem ter ocorrido fora do intervalo de\ntempo padr\u00e3o ou definido por <code>inicio</code> e/ou <code>fim</code>.</li>\n<li><strong>orgao</strong> (int, optional):\nC\u00f3digo num\u00e9rico do \u00f3rg\u00e3o da C\u00e2mara. Se presente, ser\u00e3o retornadas\nsomente vota\u00e7\u00f5es do \u00f3rg\u00e3o enumerado. Os c\u00f3digos existentes podem ser\nobtidos pela fun\u00e7\u00e3o <code>camara.lista_orgaos</code>.</li>\n<li><strong>inicio</strong> (str, optional):\nData em formato 'AAAA-MM-DD' para in\u00edcio do intervalo de tempo no qual\ntenham sido realizadas as vota\u00e7\u00f5es a serem listadas. Se usado sozinho,\nesse par\u00e2metro faz com que sejam retornadas vota\u00e7\u00f5es ocorridas dessa\ndata at\u00e9 o fim do mesmo ano. Se usado com <code>fim</code>, as duas datas devem\nser de um mesmo ano.</li>\n<li><strong>fim</strong> (str, optional):\nData em formato 'AAAA-MM-DD' que define o fim do intervalo de tempo no\nqual tenham sido realizadas as vota\u00e7\u00f5es a serem listadas. Se usado\nsozinho, esse par\u00e2metro faz com que sejam retornadas todas as vota\u00e7\u00f5es\nocorridas desde 1\u00ba de janeiro do mesmo ano at\u00e9 esta data. Se usado com\n<code>inicio</code>, \u00e9 preciso que as duas datas sejam de um mesmo ano.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=False):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='dataHoraRegistro'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["proposicao", "evento", "orgao", "inicio", "fim", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.camara.referencias", "modulename": "DadosAbertosBrasil.camara", "qualname": "referencias", "type": "function", "doc": "<p>Listas de valores v\u00e1lidos para as fun\u00e7\u00f5es deste m\u00f3dulo.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lista</strong> (str):\nRefer\u00eancias que ser\u00e3o listadas. Deve ser uma destas op\u00e7\u00f5es:\n<ul>\n<li>'autores'</li>\n<li>'temas'</li>\n<li>'eventos'</li>\n<li>'orgaos'</li>\n<li>'proposicoes'</li>\n<li>'tramitacoes'</li>\n<li>'ufs'</li>\n<li>'situacoes_deputados'</li>\n<li>'situacoes_eventos'</li>\n<li>'situacoes_orgaos'</li>\n<li>'situacoes_proposicoes'</li>\n</ul></li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["lista", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "", "type": "module", "doc": "<p>M\u00f3dulo para consulta a informa\u00e7\u00f5es variadas.</p>\n\n<p>Essas fun\u00e7\u00f5es s\u00e3o importadas pelo <code>__init__</code> do super-m\u00f3dulo\n<code>DadosAbertosBrasil</code>.</p>\n\n<p>Elas consistem em informa\u00e7\u00f5es diversas ou em fun\u00e7\u00f5es pr\u00e9-parametrizadas de\noutros m\u00f3dulo. Seu objetivo \u00e9 facilitar o acesso \u00e0s informa\u00e7\u00f5es de maior\ninteresse p\u00fablico.</p>\n"}, {"fullname": "DadosAbertosBrasil.favoritos.bandeira", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "bandeira", "type": "function", "doc": "<p>Gera a URL da WikiMedia para a bandeira de um estado.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>uf</strong> (str):\nSigla da Unidade Federativa.</li>\n<li><strong>tamanho</strong> (int, default=100):\nTamanho em pixels da bandeira.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: URL da bandeira do estado no formato PNG.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_UFError</strong>: Caso seja inserida uma UF inv\u00e1lida.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Gera o link para uma imagem da bandeira de Santa Catarina de 200 pixels.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">bandeira</span><span class=\"p\">(</span><span class=\"n\">uf</span><span class=\"o\">=</span><span class=\"s1\">&#39;SC&#39;</span><span class=\"p\">,</span> <span class=\"n\">tamanho</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/&#39; ...</span>\n</code></pre></div>\n", "parameters": ["uf", "tamanho"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.brasao", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "brasao", "type": "function", "doc": "<p>Gera a URL da WikiMedia para o bras\u00e3o de um estado.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>uf</strong> (str):\nSigla da Unidade Federativa.</li>\n<li><strong>tamanho</strong> (int, default=100):\nTamanho em pixels da bandeira.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: URL da bandeira do estado no formato PNG.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_UFError</strong>: Caso seja inserida uma UF inv\u00e1lida.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Gera o link para uma imagem do bras\u00e3o de Santa Catarina de 200 pixels.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">brasao</span><span class=\"p\">(</span><span class=\"n\">uf</span><span class=\"o\">=</span><span class=\"s1\">&#39;SC&#39;</span><span class=\"p\">,</span> <span class=\"n\">tamanho</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/&#39; ...</span>\n</code></pre></div>\n", "parameters": ["uf", "tamanho"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.catalogo", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "catalogo", "type": "function", "doc": "<p>Cat\u00e1logo de iniciativas oficiais de dados abertos no Brasil.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo um cat\u00e1logo de iniciativas de dados abertos.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">catalogo</span><span class=\"p\">()</span>\n<span class=\"go\">                                               T\u00edtulo  ...</span>\n<span class=\"go\">0                      Alagoas em dados e informa\u00e7\u00f5es  ...</span>\n<span class=\"go\">1                             Fortaleza Dados Abertos  ...</span>\n<span class=\"go\">2                              Dados abertos \u2013 TCM-CE  ...</span>\n<span class=\"go\">3                      Dados abertos Distrito Federal  ...</span>\n<span class=\"go\">4                       Dados abertos \u2013 Governo do ES  ...</span>\n<span class=\"go\">..                                                ...  ...</span>\n</code></pre></div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "parameters": [], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.codigos_municipios", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "codigos_municipios", "type": "function", "doc": "<p>Lista dos c\u00f3digos dos munic\u00edpios do IBGE e do TSE.</p>\n\n<p>Utilizado para correlacionar dados das duas APIs diferentes.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo os c\u00f3digos do IBGE e do TSE para todos os\nmunic\u00edpios do Brasil.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">codigos_municipios</span><span class=\"p\">()</span>\n<span class=\"go\">      codigo_tse  codigo_ibge nome_municipio  uf  capital</span>\n<span class=\"go\">0           1120      1200013     ACREL\u00c2NDIA  AC        0</span>\n<span class=\"go\">1           1570      1200054   ASSIS BRASIL  AC        0</span>\n<span class=\"go\">2           1058      1200104      BRASIL\u00c9IA  AC        0</span>\n<span class=\"go\">3           1007      1200138         BUJARI  AC        0</span>\n<span class=\"go\">4           1015      1200179       CAPIXABA  AC        0</span>\n<span class=\"go\">..           ...          ...            ...  ..      ...</span>\n</code></pre></div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "parameters": [], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.geojson", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "geojson", "type": "function", "doc": "<p>Coordenadas dos munic\u00edpios brasileiros em formato GeoJSON.</p>\n\n<p><em>Deprecated since version 0.3.2:</em>\nEsta fun\u00e7\u00e3o ser\u00e1 removida na vers\u00e3o 0.4.\nFavor utilizar a fun\u00e7\u00e3o <code>DadosAbertosBrasil.ibge.malha</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>uf</strong> (str):\nNome ou sigla da Unidade Federativa.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Coordenadas em formato .GeoJSON da UF pesquisada.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_UFError</strong>: Caso seja inserida uma UF inv\u00e1lida.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">geojson</span><span class=\"p\">(</span><span class=\"s1\">&#39;SC&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;type&#39;: &#39;FeatureCollection&#39;,</span>\n<span class=\"go\">    &#39;features&#39;: [{</span>\n<span class=\"go\">        &#39;type&#39;: &#39;Feature&#39;,</span>\n<span class=\"go\">        &#39;properties&#39;: {</span>\n<span class=\"go\">            &#39;id&#39;: &#39;4200051&#39;,</span>\n<span class=\"go\">            &#39;name&#39;: &#39;Abdon Batista&#39;,</span>\n<span class=\"go\">            &#39;description&#39;: &#39;Abdon Batista&#39;</span>\n<span class=\"go\">        },</span>\n<span class=\"go\">        &#39;geometry&#39;: {</span>\n<span class=\"go\">            &#39;type&#39;: &#39;Polygon&#39;,</span>\n<span class=\"go\">            &#39;coordinates&#39;: [[</span>\n<span class=\"go\">                [-51.0378352721, -27.5044338231],</span>\n<span class=\"go\">                [-51.0307859254, -27.5196681175],</span>\n<span class=\"go\">                [-51.0175689993, -27.5309862449],</span>\n<span class=\"go\">                [-50.9902859975, -27.5334223314],</span>\n<span class=\"go\">                [-50.9858971419, -27.5302011257],</span>\n<span class=\"go\">                ...</span>\n</code></pre></div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "parameters": ["uf"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.ipca", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "ipca", "type": "function", "doc": "<p>\u00cdndice nacional de pre\u00e7os ao consumidor-amplo (IPCA).</p>\n\n<p>Esta \u00e9 uma fun\u00e7\u00e3o de f\u00e1cil acesso \u00e0 s\u00e9rie temporal 433 do m\u00f3dulo <code>bacen</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ultimos</strong> (int, optional):\nRetorna os \u00faltimos N valores da s\u00e9rie num\u00e9rica.</li>\n<li><strong>inicio</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o primeiro dia da pesquisa.</li>\n<li><strong>fim</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o \u00faltimo dia da pesquisa. Caso este campo seja None, ser\u00e1\nconsiderada a data de hoje.</li>\n<li><strong>index</strong> (bool, default=False):\nDefine se a coluna 'data' ser\u00e1 o index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo os valores da s\u00e9rie temporal.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>JSONDecodeError</strong>: Em caso de par\u00e2metros inv\u00e1lidos.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Os argumentos <code>inicio</code> e <code>fim</code> devem ser usados em conjunto para\nfuncionar.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Os quatro valores mais recentes.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">ipca</span><span class=\"p\">(</span><span class=\"n\">ultimos</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">        data valor</span>\n<span class=\"go\">0 2021-03-01  0.93</span>\n<span class=\"go\">1 2021-04-01  0.31</span>\n<span class=\"go\">2 2021-05-01  0.83</span>\n<span class=\"go\">3 2021-06-01  0.53</span>\n</code></pre></div>\n\n<p>Os valores entre Janeiro e Abril de 2021 usando a data como \u00edndice.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">ipca</span><span class=\"p\">(</span><span class=\"n\">inicio</span><span class=\"o\">=</span><span class=\"s1\">&#39;2021-01-01&#39;</span><span class=\"p\">,</span> <span class=\"n\">fim</span><span class=\"o\">=</span><span class=\"s1\">&#39;2021-04-01&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">           valor</span>\n<span class=\"go\">data            </span>\n<span class=\"go\">2021-01-01  0.25</span>\n<span class=\"go\">2021-02-01  0.86</span>\n<span class=\"go\">2021-03-01  0.93</span>\n<span class=\"go\">2021-04-01  0.31</span>\n</code></pre></div>\n", "parameters": ["ultimos", "inicio", "fim", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.perfil_eleitorado", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "perfil_eleitorado", "type": "function", "doc": "<p>Tabela com perfil do eleitorado por munic\u00edpio.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo o perfil do eleitorado em todos os munic\u00edpios.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">perfil_eleitorado</span><span class=\"p\">()</span>\n<span class=\"go\">      NR_ANO_ELEICAO  CD_PAIS NM_PAIS SG_REGIAO NM_REGIAO SG_UF     NM_UF  ...</span>\n<span class=\"go\">0               2020        1  Brasil         N     Norte    AC      Acre  ...</span>\n<span class=\"go\">1               2020        1  Brasil         N     Norte    AC      Acre  ...</span>\n<span class=\"go\">..               ...      ...     ...       ...       ...   ...       ...  ...</span>\n</code></pre></div>\n", "parameters": [], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.pib", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "pib", "type": "function", "doc": "<p>Varia\u00e7\u00e3o percentual do Produto Interno Bruto Real.</p>\n\n<p>Esta \u00e9 uma fun\u00e7\u00e3o de f\u00e1cil acesso \u00e0s s\u00e9ries temporais 'PAN_PIBPMG' e\n'PAN4_PIBPMG4' do m\u00f3dulo <code>ipea</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>periodo</strong> ({'anual', 'trimestral'}, default='anual'):\nGranularidade dos valores.</li>\n<li><strong>index</strong> (bool, default=False):\nDefine a coluna <code>data</code> como index da tabela.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Tabela contendo os valores do PIB real.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Capturar PIB trimestral.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">pib</span><span class=\"p\">(</span><span class=\"n\">periodo</span><span class=\"o\">=</span><span class=\"s1\">&#39;trimestral&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">       periodo      valor</span>\n<span class=\"go\">0   1997-01-01   3.400572</span>\n<span class=\"go\">1   1997-04-01   4.754002</span>\n<span class=\"go\">2   1997-07-01   1.791279</span>\n<span class=\"go\">3   1997-10-01   3.738518</span>\n<span class=\"go\">4   1998-01-01   1.007575</span>\n<span class=\"go\">..         ...     ...</span>\n</code></pre></div>\n\n<p>Capturar PIB anual, pondo o per\u00edodo como index da tabela.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">pib</span><span class=\"p\">(</span><span class=\"n\">periodo</span><span class=\"o\">=</span><span class=\"s1\">&#39;anual&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">               valor</span>\n<span class=\"go\">periodo             </span>\n<span class=\"go\">1997-01-01  3.394846</span>\n<span class=\"go\">1998-01-01  0.338098</span>\n<span class=\"go\">1999-01-01  0.467938</span>\n<span class=\"go\">2000-01-01  4.387949</span>\n<span class=\"go\">2001-01-01  1.389896</span>\n<span class=\"gp\">... </span>             <span class=\"o\">...</span>\n</code></pre></div>\n", "parameters": ["periodo", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.rentabilidade_poupanca", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "rentabilidade_poupanca", "type": "function", "doc": "<p>Rentailidade dos dep\u00f3sitos de poupan\u00e7a a partir de Maio de 2012. </p>\n\n<p>Esta \u00e9 uma fun\u00e7\u00e3o de f\u00e1cil acesso \u00e0 s\u00e9rie temporal 195 do m\u00f3dulo <code>bacen</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ultimos</strong> (int, optional):\nRetorna os \u00faltimos N valores da s\u00e9rie num\u00e9rica.</li>\n<li><strong>inicio</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o primeiro dia da pesquisa.</li>\n<li><strong>fim</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o \u00faltimo dia da pesquisa. Caso este campo seja None, ser\u00e1\nconsiderada a data de hoje.</li>\n<li><strong>index</strong> (bool, default=False):\nDefine se a coluna 'data' ser\u00e1 o index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo os valores da s\u00e9rie temporal.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>JSONDecodeError</strong>: Em caso de par\u00e2metros inv\u00e1lidos.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Os argumentos <code>inicio</code> e <code>fim</code> devem ser usados em conjunto para\nfuncionar.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Os quatro valores mais recentes.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">rentabilidade_poupanca</span><span class=\"p\">(</span><span class=\"n\">ultimos</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">        data    datafim   valor</span>\n<span class=\"go\">0 2021-07-05 2021-08-05  0.2446</span>\n<span class=\"go\">1 2021-07-06 2021-08-06  0.2446</span>\n<span class=\"go\">2 2021-07-07 2021-08-07  0.2446</span>\n<span class=\"go\">3 2021-07-08 2021-08-08  0.2446</span>\n</code></pre></div>\n\n<p>Os valores entre Janeiro e Abril de 2021 usando a data como \u00edndice.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">rentabilidade_poupanca</span><span class=\"p\">(</span><span class=\"n\">inicio</span><span class=\"o\">=</span><span class=\"s1\">&#39;2021-01-01&#39;</span><span class=\"p\">,</span> <span class=\"n\">fim</span><span class=\"o\">=</span><span class=\"s1\">&#39;2021-04-01&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">              datafim   valor</span>\n<span class=\"go\">data                         </span>\n<span class=\"go\">2021-01-01 2021-02-01  0.1159</span>\n<span class=\"go\">2021-01-02 2021-02-02  0.1159</span>\n<span class=\"go\">2021-01-03 2021-02-03  0.1159</span>\n<span class=\"go\">2021-01-04 2021-02-04  0.1159</span>\n<span class=\"go\">2021-01-05 2021-02-05  0.1159</span>\n<span class=\"gp\">... </span>              <span class=\"o\">...</span>     <span class=\"o\">...</span>\n</code></pre></div>\n", "parameters": ["ultimos", "inicio", "fim", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.reservas_internacionais", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "reservas_internacionais", "type": "function", "doc": "<p>Reservar internacionais mensais ou di\u00e1rias.</p>\n\n<p>Esta \u00e9 uma fun\u00e7\u00e3o de f\u00e1cil acesso \u00e0s s\u00e9ries temporais 3546 e 13621\ndo m\u00f3dulo <code>bacen</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>periodo</strong> ({'mensal', 'diario'}, default='mensal'):\nPer\u00edodo dos dados consultados.</li>\n<li><strong>ultimos</strong> (int, optional):\nRetorna os \u00faltimos N valores da s\u00e9rie num\u00e9rica.</li>\n<li><strong>inicio</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o primeiro dia da pesquisa.</li>\n<li><strong>fim</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o \u00faltimo dia da pesquisa. Caso este campo seja None, ser\u00e1\nconsiderada a data de hoje.</li>\n<li><strong>index</strong> (bool, default=False):\nDefine se a coluna 'data' ser\u00e1 o index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo os valores da s\u00e9rie temporal.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>JSONDecodeError</strong>: Em caso de par\u00e2metros inv\u00e1lidos.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Os argumentos <code>inicio</code> e <code>fim</code> devem ser usados em conjunto para\nfuncionar.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Os quatro valores di\u00e1rios mais recentes.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">reservas_internacionais</span><span class=\"p\">(</span><span class=\"n\">periodo</span><span class=\"o\">=</span><span class=\"s1\">&#39;diario&#39;</span><span class=\"p\">,</span> <span class=\"n\">ultimos</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">        data   valor</span>\n<span class=\"go\">0 2021-07-05  353870</span>\n<span class=\"go\">1 2021-07-06  354086</span>\n<span class=\"go\">2 2021-07-07  354140</span>\n<span class=\"go\">3 2021-07-08  354303</span>\n</code></pre></div>\n\n<p>Os valores mensais entre Janeiro e Abril de 2021 usando a data como\n\u00edndice.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">reservas_internacionais</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">periodo</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mensal&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">inicio</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2021-01-01&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fim</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2021-04-01&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">             valor</span>\n<span class=\"go\">data              </span>\n<span class=\"go\">2021-01-01  355416</span>\n<span class=\"go\">2021-02-01  356070</span>\n<span class=\"go\">2021-03-01  347413</span>\n<span class=\"go\">2021-04-01  350996</span>\n</code></pre></div>\n", "parameters": ["periodo", "ultimos", "inicio", "fim", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.risco_brasil", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "risco_brasil", "type": "function", "doc": "<p>Valores di\u00e1rios do Risco-Brasil, disponibilizados pela J.P. Morgan\ndesde 1994.</p>\n\n<p>Esta \u00e9 uma fun\u00e7\u00e3o de f\u00e1cil acesso \u00e0 s\u00e9rie temporal 'JPM366_EMBI366' do\nm\u00f3dulo <code>ipea</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (bool, default=False):\nDefine a coluna <code>data</code> como index da tabela.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Tabela contendo os valores di\u00e1rios do Risco-Brasil.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">risco_brasil</span><span class=\"p\">()</span>\n<span class=\"go\">            data   valor</span>\n<span class=\"go\">0     1994-04-29  1120.0</span>\n<span class=\"go\">1     1994-04-30     NaN</span>\n<span class=\"go\">2     1994-05-01     NaN</span>\n<span class=\"go\">3     1994-05-02  1131.0</span>\n<span class=\"go\">4     1994-05-03  1081.0</span>\n<span class=\"go\">..           ...     ...</span>\n</code></pre></div>\n", "parameters": ["index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.salario_minimo", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "salario_minimo", "type": "function", "doc": "<p>Valores do sal\u00e1rio-m\u00ednimo mensal brasileiro desde 1940.</p>\n\n<p>Esta \u00e9 uma fun\u00e7\u00e3o de f\u00e1cil acesso \u00e0s s\u00e9rie temporais do m\u00f3dulo <code>ipea</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tipo</strong> ({'nominal', 'real', 'pcc'}, default='nominal'):\nTipo de sal\u00e1rio-m\u00ednimo.\n<ul>\n<li>'nominal': Sal\u00e1rio-m\u00ednimo nominal;</li>\n<li>'real': Sal\u00e1rio-m\u00ednimo real (abatido pela infla\u00e7\u00e3o);</li>\n<li>'ppc': Salario-m\u00ednimo por Paridade de Poder de Compra.</li>\n</ul></li>\n<li><strong>index</strong> (bool, default=False):\nDefine a coluna <code>data</code> como index da tabela.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Tabela contendo os valores mensais do sal\u00e1rio-m\u00ednimo.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Forma mais simples da fun\u00e7\u00e3o.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">salario_minimo</span><span class=\"p\">()</span>\n<span class=\"go\">           data         valor</span>\n<span class=\"go\">0    1940-07-01  8.727273e-14</span>\n<span class=\"go\">1    1940-08-01  8.727273e-14</span>\n<span class=\"go\">2    1940-09-01  8.727273e-14</span>\n<span class=\"go\">3    1940-10-01  8.727273e-14</span>\n<span class=\"go\">4    1940-11-01  8.727273e-14</span>\n<span class=\"go\">..          ...           ...</span>\n</code></pre></div>\n\n<p>Sal\u00e1rio-m\u00ednimo real usando a data como \u00edndice da tabela.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">salario_minimo</span><span class=\"p\">(</span><span class=\"n\">tipo</span><span class=\"o\">=</span><span class=\"s1\">&#39;real&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">                  valor</span>\n<span class=\"go\">data                   </span>\n<span class=\"go\">1940-07-01   962.321161</span>\n<span class=\"go\">1940-08-01   959.634185</span>\n<span class=\"go\">1940-09-01   958.771291</span>\n<span class=\"go\">1940-10-01   943.765421</span>\n<span class=\"go\">1940-11-01   922.546843</span>\n<span class=\"gp\">... </span>                <span class=\"o\">...</span>\n</code></pre></div>\n", "parameters": ["tipo", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.selic", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "selic", "type": "function", "doc": "<p>Taxa de juros - Meta Selic definida pelo COPOM.</p>\n\n<p>Esta \u00e9 uma fun\u00e7\u00e3o de f\u00e1cil acesso \u00e0 s\u00e9rie temporal 432 do m\u00f3dulo <code>bacen</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ultimos</strong> (int, optional):\nRetorna os \u00faltimos N valores da s\u00e9rie num\u00e9rica.</li>\n<li><strong>inicio</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o primeiro dia da pesquisa.</li>\n<li><strong>fim</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o \u00faltimo dia da pesquisa. Caso este campo seja None, ser\u00e1\nconsiderada a data de hoje.</li>\n<li><strong>index</strong> (bool, default=False):\nDefine se a coluna 'data' ser\u00e1 o index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo os valores da s\u00e9rie temporal.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>JSONDecodeError</strong>: Em caso de par\u00e2metros inv\u00e1lidos.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Os argumentos <code>inicio</code> e <code>fim</code> devem ser usados em conjunto para\nfuncionar.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Os quatro valores mais recentes.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">selic</span><span class=\"p\">(</span><span class=\"n\">ultimos</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">        data valor</span>\n<span class=\"go\">0 2021-08-01  4.25</span>\n<span class=\"go\">1 2021-08-02  4.25</span>\n<span class=\"go\">2 2021-08-03  4.25</span>\n<span class=\"go\">3 2021-08-04  4.25</span>\n</code></pre></div>\n\n<p>Os valores entre Janeiro e Abril de 2021 usando a data como \u00edndice.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">selic</span><span class=\"p\">(</span><span class=\"n\">inicio</span><span class=\"o\">=</span><span class=\"s1\">&#39;2021-01-01&#39;</span><span class=\"p\">,</span> <span class=\"n\">fim</span><span class=\"o\">=</span><span class=\"s1\">&#39;2021-04-01&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">           valor</span>\n<span class=\"go\">data            </span>\n<span class=\"go\">2021-01-01  2.00</span>\n<span class=\"go\">2021-01-02  2.00</span>\n<span class=\"go\">2021-01-03  2.00</span>\n<span class=\"go\">2021-01-04  2.00</span>\n<span class=\"go\">2021-01-05  2.00</span>\n<span class=\"gp\">... </span>         <span class=\"o\">...</span>\n</code></pre></div>\n", "parameters": ["ultimos", "inicio", "fim", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.favoritos.taxa_referencial", "modulename": "DadosAbertosBrasil.favoritos", "qualname": "taxa_referencial", "type": "function", "doc": "<p>Taxa referencial (TR).</p>\n\n<p>Esta \u00e9 uma fun\u00e7\u00e3o de f\u00e1cil acesso \u00e0 s\u00e9rie temporal 226 do m\u00f3dulo <code>bacen</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ultimos</strong> (int, optional):\nRetorna os \u00faltimos N valores da s\u00e9rie num\u00e9rica.</li>\n<li><strong>inicio</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o primeiro dia da pesquisa.</li>\n<li><strong>fim</strong> (datetime or str, optional):\nValor datetime ou string no formato de data 'AAAA-MM-DD' que\nrepresenta o \u00faltimo dia da pesquisa. Caso este campo seja None, ser\u00e1\nconsiderada a data de hoje.</li>\n<li><strong>index</strong> (bool, default=False):\nDefine se a coluna 'data' ser\u00e1 o index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo os valores da s\u00e9rie temporal.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>JSONDecodeError</strong>: Em caso de par\u00e2metros inv\u00e1lidos.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Os argumentos <code>inicio</code> e <code>fim</code> devem ser usados em conjunto para\nfuncionar.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Os quatro valores mais recentes.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">taxa_referencial</span><span class=\"p\">(</span><span class=\"n\">ultimos</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">        data    datafim   valor</span>\n<span class=\"go\">0 2021-07-05 2021-08-05  0.0000</span>\n<span class=\"go\">1 2021-07-06 2021-08-06  0.0000</span>\n<span class=\"go\">2 2021-07-07 2021-08-07  0.0000</span>\n<span class=\"go\">3 2021-07-08 2021-08-08  0.0000</span>\n</code></pre></div>\n\n<p>Os valores entre Janeiro e Abril de 2021 usando a data como \u00edndice.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">favoritos</span><span class=\"o\">.</span><span class=\"n\">taxa_referencial</span><span class=\"p\">(</span><span class=\"n\">inicio</span><span class=\"o\">=</span><span class=\"s1\">&#39;2021-01-01&#39;</span><span class=\"p\">,</span> <span class=\"n\">fim</span><span class=\"o\">=</span><span class=\"s1\">&#39;2021-04-01&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">              datafim   valor</span>\n<span class=\"go\">data                         </span>\n<span class=\"go\">2021-01-01 2021-02-01  0.0000</span>\n<span class=\"go\">2021-01-02 2021-02-02  0.0000</span>\n<span class=\"go\">2021-01-03 2021-02-03  0.0000</span>\n<span class=\"go\">2021-01-04 2021-02-04  0.0000</span>\n<span class=\"go\">2021-01-05 2021-02-05  0.0000</span>\n<span class=\"gp\">... </span>              <span class=\"o\">...</span>     <span class=\"o\">...</span>\n</code></pre></div>\n", "parameters": ["ultimos", "inicio", "fim", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.ibge", "modulename": "DadosAbertosBrasil.ibge", "qualname": "", "type": "module", "doc": "<p>M\u00f3dulo para captura dos dados abertos das APIs do IBGE.</p>\n\n<h2 id=\"servicos-disponiveis\">Servi\u00e7os Dispon\u00edveis</h2>\n\n<ul>\n<li>IBGE Cidades</li>\n<li>Nomes 2.0</li>\n<li>Agregados 3.0 (SIDRA)</li>\n<li>Malhas Geogr\u00e1ficas 2.0</li>\n<li>Proje\u00e7\u00f5es 1.0</li>\n<li>Localidades 1.0</li>\n</ul>\n\n<h2 id=\"mini-tutorial-de-sidra\">Mini-Tutorial de SIDRA</h2>\n\n<ol>\n<li><p>Importe o m\u00f3dulo <code>ibge</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">DadosAbertosBrasil</span> <span class=\"kn\">import</span> <span class=\"n\">ibge</span>\n</code></pre></div></li>\n<li><p>Utilize a fun\u00e7\u00e3o <code>lista_tabelas</code> com os filtros necess\u00e1rios para encontrar\na tabela desejada.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">lista_tabelas</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n</code></pre></div></li>\n<li><p>Utilize as fun\u00e7\u00f5es <code>lista_pesquisas</code> e <code>referencias</code> para facilitar a busca.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pesquisas</span> <span class=\"o\">=</span> <span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">lista_pesquisas</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">referencias</span> <span class=\"o\">=</span> <span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">referencias</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n</code></pre></div></li>\n<li><p>Ap\u00f3s obter o c\u00f3digo num\u00e9rico da tabela, insira-o como argumento de um\nobjeto <code>Metadados</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dados</span> <span class=\"o\">=</span> <span class=\"n\">ibge</span><span class=\"o\">.</span><span class=\"n\">Metadados</span><span class=\"p\">(</span><span class=\"n\">tabela</span><span class=\"p\">)</span>\n</code></pre></div></li>\n<li><p>Pelos atributos do objeto <code>Metadados</code>, veja quais s\u00e3o os valores\ndispon\u00edveis para consulta desta tabela.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dados</span><span class=\"o\">.</span><span class=\"n\">periodos</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dados</span><span class=\"o\">.</span><span class=\"n\">variaveis</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dados</span><span class=\"o\">.</span><span class=\"n\">localidades</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dados</span><span class=\"o\">.</span><span class=\"n\">classificacoes</span><span class=\"p\">)</span>\n</code></pre></div></li>\n<li><p>Utilize os valores encontrados nos metadados da tabela para alimentar a\nfun\u00e7\u00e3o <code>sidra</code>.</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>ibge.sidra( ... )</p>\n    </blockquote>\n  </blockquote>\n</blockquote></li>\n</ol>\n\n<h6 id=\"references\">References</h6>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n"}, {"fullname": "DadosAbertosBrasil.ipea", "modulename": "DadosAbertosBrasil.ipea", "qualname": "", "type": "module", "doc": "<p>M\u00f3dulo para captura dos dados abertos da API do IpeaData.</p>\n\n<h2 id=\"mini-tutorial\">Mini-Tutorial</h2>\n\n<ol>\n<li><p>Importe o m\u00f3dulo <code>ipea</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">DadosAbertosBrasil</span> <span class=\"kn\">import</span> <span class=\"n\">ipea</span>\n</code></pre></div></li>\n<li><p>Busque o c\u00f3digo alfanum\u00e9rico da s\u00e9rie desejada com a fun\u00e7\u00e3o\n<code>ipea.lista_series</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_series</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n</code></pre></div></li>\n<li><p>Para facilitar a busca, filtre temas, pa\u00edses ou n\u00edveis territoriais com\nas outras fun\u00e7\u00f5es <code>lista</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">temas</span> <span class=\"o\">=</span> <span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_temas</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paises</span> <span class=\"o\">=</span> <span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_paises</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">territorios</span> <span class=\"o\">=</span> <span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_territorios</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">niveis</span> <span class=\"o\">=</span> <span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_niveis</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n</code></pre></div></li>\n<li><p>Instancie o objeto <code>Serie</code> utilizando o c\u00f3digo encontrado.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">serie</span> <span class=\"o\">=</span> <span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">Serie</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"p\">)</span>\n</code></pre></div></li>\n<li><p>Utilize os atributos para visualizar valores e metadados do s\u00e9rie.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">serie</span><span class=\"o\">.</span><span class=\"n\">metadados</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">serie</span><span class=\"o\">.</span><span class=\"n\">valores</span>\n</code></pre></div></li>\n<li><p>Alternativamente, utilize a fun\u00e7\u00e3o <code>ipea.serie</code> para coletar apenas os\nvalores da s\u00e9rie, sem os metadados. Est\u00e1 \u00e9 uma forma simplificada e mais\nr\u00e1pida de obter os dados de uma s\u00e9rie.</p></li>\n</ol>\n\n<h6 id=\"references\">References</h6>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n"}, {"fullname": "DadosAbertosBrasil.ipea.Serie", "modulename": "DadosAbertosBrasil.ipea", "qualname": "Serie", "type": "class", "doc": "<p>Dados de uma s\u00e9rie IPEA.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (str):\nC\u00f3digo da s\u00e9rie que se deseja obter os dados.\nUtilize a fun\u00e7\u00e3o <code>ipea.lista_series</code> para identificar a s\u00e9rie desejada.\nO c\u00f3digo desejado estar\u00e1 na coluna 'SERCODIGO'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna 'SERCODIGO' como index do atributo 'valores'.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>cod</strong> (str):\nC\u00f3digo da s\u00e9rie escolhida.</li>\n<li><strong>valores</strong> (pandas.core.frame.DataFrame):\nDados hist\u00f3ricos da s\u00e9rie escolhida. Alias de <code>dados</code>.</li>\n<li><strong>dados</strong> (pandas.core.frame.DataFrame):\nDados hist\u00f3ricos da s\u00e9rie escolhida. Alias de <code>valores</code>.</li>\n<li><strong>metadados</strong> (pandas.core.frame.DataFrame):\nMetadados da s\u00e9rie escolhida.</li>\n<li><strong>base</strong> (str):\nNome da base de dados da s\u00e9rie.</li>\n<li><strong>fonte_nome</strong> (str):\nNome completo da fonte da s\u00e9rie, em portugu\u00eas.</li>\n<li><strong>fonte_sigla</strong> (str):\nSigla ou nome abreviado da fonte da s\u00e9rie, em portugu\u00eas.</li>\n<li><strong>fonte_url</strong> (str):\nURL para o site da fonte da s\u00e9rie.</li>\n<li><strong>mutiplicador</strong> (str):\nNome do fator multiplicador dos valores da s\u00e9rie.</li>\n<li><strong>periodicidade</strong> (str):\nNome da periodicidade, em portugu\u00eas.</li>\n<li><strong>atualizacao</strong> (str):\nData da \u00faltima carga de dados na s\u00e9rie.</li>\n<li><strong>comentario</strong> (str):\nComent\u00e1rios relativos a s\u00e9rie, em portugu\u00eas.</li>\n<li><strong>nome</strong> (str):\nNome da s\u00e9rie, em portugu\u00eas.</li>\n<li><strong>unidade</strong> (str):\nNome da unidade dos valores da s\u00e9rie.</li>\n<li><strong>status</strong> (str):\nIndica se uma s\u00e9rie macroecon\u00f4mica ainda \u00e9 atualizada.\n<ul>\n<li>'A' (Ativa) para s\u00e9ries atualizadas;</li>\n<li>'I' (Inativa) para s\u00e9ries que n\u00e3o s\u00e3o atualizadas.\nAs s\u00e9ries regionais ou sociais n\u00e3o possuem este metadado.</li>\n</ul></li>\n<li><strong>tema</strong> (int):\nC\u00f3digo de identifica\u00e7\u00e3o do tema ao qual a s\u00e9rie est\u00e1 associada.</li>\n<li><strong>pais</strong> (str):\nC\u00f3digo de identifica\u00e7\u00e3o pa\u00eds ou regi\u00e3o (como Am\u00e9rica Latina, Zona do\nEuro, etc.) ao qual a s\u00e9rie est\u00e1 associada.</li>\n<li><strong>numerica</strong> (bool):\n<ul>\n<li>True: S\u00e9rie possui valores num\u00e9ricos (tratados como n\u00fameros);</li>\n<li>False: S\u00e9rie possui valores s\u00e3o alfanum\u00e9ricos (string).</li>\n</ul></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Os atributos <code>dados</code> e <code>valores</code> apresentam os mesmos dados. \"Valores\" \u00e9 o\ntermo padr\u00e3o para os dados hist\u00f3ricos do Ipeadata, por\u00e9m o termo \"Dados\" \u00e9\no padr\u00e3o do pacote <code>DadosAbertosBrasil</code>.</p>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.ipea.serie\nFun\u00e7\u00e3o</code>, <code>que</code>, <code>coleta</code>, <code>os</code>, <code>mesmos</code>, <code>dados</code>, <code>hist\u00f3ricos</code>, <code>desta</code>, <code>classe,</code>, <code>por\u00e9m</code>, <code>\u00e9\nmais</code>, <code>simples</code>, <code>e</code>, <code>n\u00e3o</code>, <code>coleta</code>, <code>os</code>, <code>metadados</code>, <code>da</code>, <code>s\u00e9rie.</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<ol>\n<li>Utilize as fun\u00e7\u00f5es <code>lista</code> para encontrar a s\u00e9rie desejada.</li>\n</ol>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_series</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<ol>\n<li>Instancie a classe <code>Serie</code> utilizando o c\u00f3digo encontrado.</li>\n</ol>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">Serie</span><span class=\"p\">(</span><span class=\"s1\">&#39;PAN4_PIBPMV4&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<ol>\n<li>Utilize o atributo <code>dados</code> para ver a s\u00e9rie hist\u00f3rica.</li>\n</ol>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">dados</span>\n<span class=\"go\">       SERCODIGO                    VALDATA      VALVALOR      0   PAN4_PIBPMV4  1996-01-01T00:00:00-02:00  1.893233e+05      1   PAN4_PIBPMV4  1996-04-01T00:00:00-03:00  2.046107e+05      2   PAN4_PIBPMV4  1996-07-01T00:00:00-03:00  2.215132e+05      3   PAN4_PIBPMV4  1996-10-01T00:00:00-03:00  2.393163e+05      4   PAN4_PIBPMV4  1997-01-01T00:00:00-02:00  2.191170e+05      ..           ...                        ...           ...  </span>\n<span class=\"go\">4. Para ver os metadados, basta chamar o atributo correspondente.</span>\n</code></pre></div>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">nome</span>\n<span class=\"go\">&#39;PIB nominal&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">periodicidade</span>\n<span class=\"go\">&#39;Trimestral&#39;</span>\n</code></pre></div>\n"}, {"fullname": "DadosAbertosBrasil.ipea.Serie.__init__", "modulename": "DadosAbertosBrasil.ipea", "qualname": "Serie.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cod", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.ipea.lista_series", "modulename": "DadosAbertosBrasil.ipea", "qualname": "lista_series", "type": "function", "doc": "<p>Registros de metadados de todas as s\u00e9ries do IPEA.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna 'SERCODIGO' como index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame onde cada coluna \u00e9 um metadado e cada registro \u00e9 uma s\u00e9rie\ndo IPEA.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<p>Forma mais simples da fun\u00e7\u00e3o.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_series</span><span class=\"p\">()</span>\n<span class=\"go\">           SERCODIGO                                SERNOME  ...</span>\n<span class=\"go\">0       ABATE_ABPEAV       Abate - aves - peso das carca\u00e7as  ...</span>\n<span class=\"go\">1       ABATE_ABPEBV    Abate - bovinos - peso das carca\u00e7as  ...</span>\n<span class=\"go\">2       ABATE_ABPESU     Abate - su\u00ednos - peso das carca\u00e7as  ...</span>\n<span class=\"go\">3       ABATE_ABQUAV                    Abate - aves - qde.  ...</span>\n<span class=\"go\">4       ABATE_ABQUBV                 Abate - bovinos - qde.  ...</span>\n<span class=\"gp\">... </span>             <span class=\"o\">...</span>                                    <span class=\"o\">...</span>  <span class=\"o\">...</span>\n</code></pre></div>\n\n<p>Utilize o argumento <code>index=True</code> para colocar a coluna 'SERCODIGO'\ncomo index do DataFrame.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_series</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">                                            SERNOME  ...</span>\n<span class=\"go\">SERCODIGO                                            ...</span>\n<span class=\"go\">ABATE_ABPEAV       Abate - aves - peso das carca\u00e7as  ...</span>\n<span class=\"go\">ABATE_ABPEBV    Abate - bovinos - peso das carca\u00e7as  ...</span>\n<span class=\"go\">ABATE_ABPESU     Abate - su\u00ednos - peso das carca\u00e7as  ...</span>\n<span class=\"go\">ABATE_ABQUAV                    Abate - aves - qde.  ...</span>\n<span class=\"go\">ABATE_ABQUBV                 Abate - bovinos - qde.  ...</span>\n<span class=\"gp\">... </span>                                            <span class=\"o\">...</span>  <span class=\"o\">...</span>\n</code></pre></div>\n", "parameters": ["index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.ipea.lista_temas", "modulename": "DadosAbertosBrasil.ipea", "qualname": "lista_temas", "type": "function", "doc": "<p>Registros de todos os temas cadastrados.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int, optional):\nC\u00f3digo do tema, caso queira ver os dados deste tema exclusivamente.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna 'TEMCODIGO' como index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo um registro de todos os temas das s\u00e9ries do IPEA.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Forma mais simples da fun\u00e7\u00e3o.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_temas</span><span class=\"p\">()</span>\n<span class=\"go\">    TEMCODIGO  TEMCODIGO_PAI                  TEMNOME</span>\n<span class=\"go\">0          28            NaN             Agropecu\u00e1ria</span>\n<span class=\"go\">1          23            NaN       Assist\u00eancia social</span>\n<span class=\"go\">2          10            NaN    Balan\u00e7o de pagamentos</span>\n<span class=\"go\">3           7            NaN                   C\u00e2mbio</span>\n<span class=\"go\">4           5            NaN        Com\u00e9rcio exterior</span>\n<span class=\"go\">..        ...            ...                      ...</span>\n</code></pre></div>\n\n<p>Utilize o argumento <code>index=True</code> para colocar a coluna 'TEMCODIGO'\ncomo index do DataFrame.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_temas</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">           TEMCODIGO_PAI                  TEMNOME</span>\n<span class=\"go\">TEMCODIGO                                        </span>\n<span class=\"go\">28                   NaN             Agropecu\u00e1ria</span>\n<span class=\"go\">23                   NaN       Assist\u00eancia social</span>\n<span class=\"go\">10                   NaN    Balan\u00e7o de pagamentos</span>\n<span class=\"go\">7                    NaN                   C\u00e2mbio</span>\n<span class=\"go\">5                    NaN        Com\u00e9rcio exterior</span>\n<span class=\"gp\">... </span>                 <span class=\"o\">...</span>                      <span class=\"o\">...</span>\n</code></pre></div>\n", "parameters": ["cod", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.ipea.lista_paises", "modulename": "DadosAbertosBrasil.ipea", "qualname": "lista_paises", "type": "function", "doc": "<p>Registros de todos os pa\u00edses cadastrados.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (str, optional):\nSigla de tr\u00eas letras do pa\u00eds, caso queira ver os dados deste\npa\u00eds exclusivamente.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna 'PAICODIGO' como index do DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo um registro de todos os pa\u00edses das s\u00e9ries do IPEA.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Forma mais simples da fun\u00e7\u00e3o.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_paises</span><span class=\"p\">()</span>\n<span class=\"go\">   PAICODIGO          PAINOME</span>\n<span class=\"go\">0        AFG      Afeganist\u00e3o</span>\n<span class=\"go\">1        ZAF    \u00c1frica do Sul</span>\n<span class=\"go\">2        DEU         Alemanha</span>\n<span class=\"go\">3       LATI   Am\u00e9rica Latina</span>\n<span class=\"go\">4        AGO           Angola</span>\n<span class=\"go\">..       ...              ...</span>\n</code></pre></div>\n\n<p>Utilize o argumento <code>index=True</code> para colocar a coluna 'PAICODIGO'\ncomo index do DataFrame.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_paises</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">                  PAINOME</span>\n<span class=\"go\">PAICODIGO                             </span>\n<span class=\"go\">AFG            Afeganist\u00e3o</span>\n<span class=\"go\">ZAF          \u00c1frica do Sul</span>\n<span class=\"go\">DEU               Alemanha</span>\n<span class=\"go\">LATI        Am\u00e9rica Latina</span>\n<span class=\"go\">AGO                 Angola</span>\n<span class=\"gp\">... </span>                   <span class=\"o\">...</span>\n</code></pre></div>\n", "parameters": ["cod", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.ipea.lista_territorios", "modulename": "DadosAbertosBrasil.ipea", "qualname": "lista_territorios", "type": "function", "doc": "<p>Registros de todos os territ\u00f3rios brasileiros cadastrados.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int, optional):\nC\u00f3digo do territ\u00f3rio, caso queira ver os dados deste\nterrit\u00f3rio exclusivamente.</li>\n<li><strong>nivel</strong> (str, optional):\nNome do n\u00edvel territorial.\nUtilize a fun\u00e7\u00e3o ipea.niveis_territoriais() para verificar\nas op\u00e7\u00f5es dispon\u00edveis.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: DataFrame contendo o registro de todos os territ\u00f3rios\ndas s\u00e9ries do IPEA.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_territorios</span><span class=\"p\">()</span>\n<span class=\"go\">       NIVNOME  TERCODIGO                TERNOME      0                                 (n\u00e3o definido)      1       Brasil          0                 Brasil      2      Regi\u00f5es          1           Regi\u00e3o Norte      3      Estados         11               Rond\u00f4nia      4   Munic\u00edpios    1100015  Alta Floresta D&#39;Oeste      ..         ...        ...                    ...</span>\n</code></pre></div>\n", "parameters": ["cod", "nivel"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.ipea.lista_niveis", "modulename": "DadosAbertosBrasil.ipea", "qualname": "lista_niveis", "type": "function", "doc": "<p>Lista dos poss\u00edveis n\u00edveis territoriais.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list of str</strong>: Lista de todos os n\u00edveis territoriais das s\u00e9ries do IPEA.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_niveis</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;Brasil&#39;, &#39;Regi\u00f5es&#39;, ... , &#39;AMC 70-00&#39;, &#39;Outros Pa\u00edses&#39;]</span>\n</code></pre></div>\n", "parameters": [], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.ipea.serie", "modulename": "DadosAbertosBrasil.ipea", "qualname": "serie", "type": "function", "doc": "<p>Valores de uma s\u00e9rie IPEA.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (str):\nC\u00f3digo da s\u00e9rie que se deseja obter os dados.\nUtilize a fun\u00e7\u00e3o <code>ipea.lista_series</code> para identificar a s\u00e9rie desejada.\nO c\u00f3digo desejado estar\u00e1 na coluna 'SERCODIGO'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna 'VALDATA' como index do atributo 'valores'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: S\u00e9rie temporal do Ipeadata em formato de DataFrame.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<ol>\n<li>Utilize as fun\u00e7\u00f5es <code>lista</code> para encontrar a s\u00e9rie desejada.</li>\n</ol>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">lista_series</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<ol>\n<li>Utilize o c\u00f3digo encontrado como argumento da fun\u00e7\u00e3o <code>serie</code>.</li>\n</ol>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ipea</span><span class=\"o\">.</span><span class=\"n\">serie</span><span class=\"p\">(</span><span class=\"s1\">&#39;PAN4_PIBPMV4&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">       SERCODIGO                    VALDATA      VALVALOR      0   PAN4_PIBPMV4  1996-01-01T00:00:00-02:00  1.893233e+05      1   PAN4_PIBPMV4  1996-04-01T00:00:00-03:00  2.046107e+05      2   PAN4_PIBPMV4  1996-07-01T00:00:00-03:00  2.215132e+05      3   PAN4_PIBPMV4  1996-10-01T00:00:00-03:00  2.393163e+05      4   PAN4_PIBPMV4  1997-01-01T00:00:00-02:00  2.191170e+05      ..           ...                        ...           ...  </span>\n<span class=\"go\">&lt;h6 id=&quot;see-also&quot;&gt;See Also&lt;/h6&gt;</span>\n</code></pre></div>\n\n<p><code>DadosAbertosBrasil.ipea.Serie\nClass</code>, <code>do</code>, <code>m\u00f3dulo</code>, <code>ipea</code>, <code>que</code>, <code>coleta</code>, <code>os</code>, <code>mesmos</code>, <code>valores</code>, <code>desta</code>, <code>fun\u00e7\u00e3o,\npor\u00e9m</code>, <code>tamb\u00e9m</code>, <code>coleta</code>, <code>os</code>, <code>metadados</code>, <code>da</code>, <code>s\u00e9rie.</code>  </p>\n", "parameters": ["cod", "index"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado", "modulename": "DadosAbertosBrasil.senado", "qualname": "", "type": "module", "doc": "<p>M\u00f3dulo para captura dos dados abertos da Senado Brasileiro.</p>\n\n<h2 id=\"mini-tutorial\">Mini-Tutorial</h2>\n\n<ol>\n<li><p>Importe o m\u00f3dulo <code>senado</code></p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">DadosAbertosBrasil</span> <span class=\"kn\">import</span> <span class=\"n\">senado</span>\n</code></pre></div></li>\n<li><p>Utilize as fun\u00e7\u00f5es <code>lista</code> para identificar o c\u00f3digo do Senado desejado.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">lista_senadores</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">lista_legislatura</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n</code></pre></div></li>\n<li><p>Utilize a class <code>Senador</code> para obter as informa\u00e7\u00f5es do(a) parlamentar.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sen</span> <span class=\"o\">=</span> <span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">Senador</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"p\">)</span>\n</code></pre></div></li>\n<li><p>Ap\u00f3s a class <code>Senador</code> ser instanciada, utilize seus m\u00e9todos para buscas\noutros tipos de informa\u00e7\u00e3o sobre ele(a).</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>sen.cargos( ... )\n      sen.votacoes( ... )\n      ... </p>\n    </blockquote>\n  </blockquote>\n</blockquote></li>\n</ol>\n\n<h6 id=\"references\">References</h6>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n"}, {"fullname": "DadosAbertosBrasil.senado.lista_blocos", "modulename": "DadosAbertosBrasil.senado", "qualname": "lista_blocos", "type": "function", "doc": "<p>Obt\u00e9m a lista e a composi\u00e7\u00e3o dos Blocos Parlamentares no\nCongresso Nacional.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.lista_legislatura", "modulename": "DadosAbertosBrasil.senado", "qualname": "lista_legislatura", "type": "function", "doc": "<p>Lista senadores de uma legislatura ou de um intervalo de legislaturas.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inicio</strong> (int):\nC\u00f3digo da primeira legislatura da consulta.</li>\n<li><strong>fim</strong> (int, optional):\nC\u00f3digo da \u00faltima legislatura da consulta.\nSe fim=None, pesquisa apenas pela legislatura do campo <code>inicio</code>.\nCaso contr\u00e1rio, pesquisa todas os valores de todas as legislaturas\nentre <code>inicio</code> e <code>fim</code>.</li>\n<li><strong>exercicio</strong> (str, optional):\n<ul>\n<li>True: Consulta apenas os senadores que entraram em exerc\u00edcio.</li>\n<li>False: Consulta apenas os senadores que n\u00e3o entratam em exerc\u00edcio.</li>\n</ul></li>\n<li><strong>participacao</strong> ({'titulares', 'suplentes'}, optional):\n<ul>\n<li>None: Busca qualquer tipo de participa\u00e7\u00e3o.</li>\n<li>'titulares': Busca apenas titulares.</li>\n<li>'suplentes': Busca apenas suplentes.</li>\n</ul></li>\n<li><strong>uf</strong> (str, optional):\nFiltra uma unidade federativa.\nSe uf=None, lista senadores de todas as UFs.</li>\n<li><strong>sexo</strong> ({'F', 'M'}, optional):\nFiltro de sexo dos senadores.</li>\n<li><strong>partido</strong> (str, optional):\nFiltro de partido dos senadores.</li>\n<li><strong>contendo</strong> (str, optional):\nCaptura apenas senadores contendo esse texto no nome.</li>\n<li><strong>excluindo</strong> (str, optional):\nExclui da consulta senadores contendo esse texto no nome.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_UFError</strong>: Caso seja inserida uma UF inv\u00e1lida no argumento <code>uf</code>.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.senado.Senador\nUse</code>, <code>o</code>, <code>codigo</code>, <code>para</code>, <code>obter</code>, <code>um</code>, <code>detalhamento</code>, <code>do</code>, <code>senador.</code> <br />\n<code>DadosAbertosBrasil.senado.lista_senadores\nFun\u00e7\u00e3o</code>, <code>de</code>, <code>busca</code>, <code>de</code>, <code>senadores</code>, <code>espec\u00edfica</code>, <code>para</code>, <code>a</code>, <code>legisla\u00e7\u00e3o</code>, <code>atual.</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Lista senadores titulares em exerc\u00edcio na legislatura 56.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">lista_legislatura</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">inicio</span> <span class=\"o\">=</span> <span class=\"mi\">56</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">participacao</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;titulares&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">exercicio</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">   codigo         nome_parlamentar               nome_completo     0    4981             Acir Gurgacz         Acir Marcos Gurgacz   </span>\n<span class=\"go\">1    5982        Alessandro Vieira           Alessandro Vieira   </span>\n<span class=\"go\">2     945              Alvaro Dias       Alvaro Fernandes Dias </span>\n<span class=\"go\">..    ...                      ...                         ...</span>\n</code></pre></div>\n\n<p>Lista mulheres senadoras do PT na legislatura 55.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">lista_legislatura</span><span class=\"p\">(</span><span class=\"n\">inicio</span><span class=\"o\">=</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"n\">partido</span><span class=\"o\">=</span><span class=\"s1\">&#39;PT&#39;</span><span class=\"p\">,</span> <span class=\"n\">sexo</span><span class=\"o\">=</span><span class=\"s1\">&#39;F&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">  codigo nome_parlamentar                      nome_completo      sexo     0   3713   F\u00e1tima Bezerra            Maria de F\u00e1tima Bezerra  Feminino   </span>\n<span class=\"go\">1   5006  Gleisi Hoffmann             Gleisi Helena Hoffmann  Feminino   </span>\n<span class=\"go\">2   5575         Marizete  Marizete Lisboa Fernandes Pereira  Feminino   </span>\n<span class=\"go\">3   5182     Regina Sousa                 Maria Regina Sousa  Feminino</span>\n</code></pre></div>\n", "parameters": ["inicio", "fim", "exercicio", "participacao", "uf", "sexo", "partido", "contendo", "excluindo", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.lista_partidos", "modulename": "DadosAbertosBrasil.senado", "qualname": "lista_partidos", "type": "function", "doc": "<p>Lista os partidos pol\u00edticos.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inativos</strong> (bool, default=False):\n<ul>\n<li>True para incluir partidos inativos na lista.</li>\n<li>False para listar apenas os partidos ativos.</li>\n</ul></li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.camara.lista_partidos\nFun\u00e7\u00e3o</code>, <code>semelhante</code>, <code>do</code>, <code>m\u00f3dulo</code>, `<code>camara</code>.`  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Capturar todos os partidos, incluindo inativos.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">lista_partido</span><span class=\"p\">(</span><span class=\"n\">inativos</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">   codigo          sigla                          nome data_criacao     0     525            ANL  Alian\u00e7a Nacional Libertadora   1935-01-01   </span>\n<span class=\"go\">1     238          ARENA   Alian\u00e7a Renovadora Nacional   1965-11-24   </span>\n<span class=\"go\">2     578         AVANTE                        AVANTE   2017-09-12</span>\n</code></pre></div>\n", "parameters": ["inativos", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.lista_senadores", "modulename": "DadosAbertosBrasil.senado", "qualname": "lista_senadores", "type": "function", "doc": "<p>Lista de senadores da rep\u00fablica.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tipo</strong> ({'atual', 'titulares', 'suplentes', 'afastados'}):\n<ul>\n<li>'atual': Todos os senadores em exerc\u00edcio;</li>\n<li>'titulares': Apenas senadores que iniciaram o mandato como titulares;</li>\n<li>'suplentes': Apenas senadores que iniciaram o mandato como suplentes;</li>\n<li>'afastados': Todos os senadores afastados.</li>\n</ul></li>\n<li><strong>uf</strong> (str, optional):\nFiltro de Unidade Federativa dos senadores.</li>\n<li><strong>sexo</strong> ({'F', 'M'}, optional):\nFiltro de sexo dos senadores.</li>\n<li><strong>partido</strong> (str, optional):\nFiltro de partido dos senadores.</li>\n<li><strong>contendo</strong> (str, optional):\nCaptura apenas senadores contendo esse texto no nome.</li>\n<li><strong>excluindo</strong> (str, optional):\nExclui da consulta senadores contendo esse texto no nome.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_UFError</strong>: Caso seja inserida uma UF inv\u00e1lida no argumento <code>uf</code>.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.senado.Senador\nUse</code>, <code>o</code>, <code>codigo</code>, <code>para</code>, <code>obter</code>, <code>um</code>, <code>detalhamento</code>, <code>do</code>, <code>senador.</code> <br />\n<code>DadosAbertosBrasil.senado.lista_legislatura\nPesquisa</code>, <code>por</code>, <code>senadores</code>, <code>de</code>, <code>outras</code>, <code>legislaturas,</code>, <code>al\u00e9m</code>, <code>da</code>, <code>atual.</code> <br />\n<code>DadosAbertosBrasil.camara.lista_deputados\nFun\u00e7\u00e3o</code>, <code>similar</code>, <code>para</code>, <code>o</code>, <code>m\u00f3dulo</code>, `<code>camara</code>.`  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Lista todos os senadores ativos, colocando o c\u00f3digo como index da tabela.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">lista_senadores</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">               nome_parlamentar                nome_completo     codigo                                                         </span>\n<span class=\"go\">4981               Acir Gurgacz          Acir Marcos Gurgacz</span>\n<span class=\"go\">5982          Alessandro Vieira            Alessandro Vieira</span>\n<span class=\"go\">945                 Alvaro Dias        Alvaro Fernandes Dias</span>\n<span class=\"gp\">... </span>                        <span class=\"o\">...</span>                          <span class=\"o\">...</span>\n</code></pre></div>\n\n<p>Lista senadores do partido PL do Rio de Janeiro.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">lista_senadores</span><span class=\"p\">(</span><span class=\"n\">partido</span><span class=\"o\">=</span><span class=\"s1\">&#39;PL&#39;</span><span class=\"p\">,</span> <span class=\"n\">uf</span><span class=\"o\">=</span><span class=\"s1\">&#39;RJ&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">  codigo nome_parlamentar              nome_completo       sexo     0   5936  Carlos Portinho  Carlos Francisco Portinho  Masculino</span>\n<span class=\"go\">1   5322          Rom\u00e1rio     Romario de Souza Faria  Masculino</span>\n</code></pre></div>\n\n<p>Lista senadores contendo 'Gomes' no nome, exceto os que cont\u00e9m 'Cid'.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">lista_senadores</span><span class=\"p\">(</span><span class=\"n\">contendo</span><span class=\"o\">=</span><span class=\"s1\">&#39;Gomes&#39;</span><span class=\"p\">,</span> <span class=\"n\">excluindo</span><span class=\"o\">=</span><span class=\"s1\">&#39;Cid&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">  codigo nome_parlamentar                nome_completo       sexo     0   3777    Eduardo Gomes  Carlos Eduardo Torres Gomes  Masculino</span>\n<span class=\"go\">1   5979     Leila Barros   Leila Gomes de Barros R\u00eago   Feminino</span>\n<span class=\"go\">2   5557     Mailza Gomes        Mailza Assis da Silva   Feminino</span>\n</code></pre></div>\n\n<p>Lista senadoras afastadas do sexo feminino.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">lista_senadores</span><span class=\"p\">(</span><span class=\"n\">tipo</span><span class=\"o\">=</span><span class=\"s1\">&#39;afastados&#39;</span><span class=\"p\">,</span> <span class=\"n\">sexo</span><span class=\"o\">=</span><span class=\"s1\">&#39;F&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">  codigo nome_parlamentar                    nome_completo      sexo     0   3713   F\u00e1tima Bezerra          Maria de F\u00e1tima Bezerra  Feminino</span>\n<span class=\"go\">1   5929      Ju\u00edza Selma       Selma Rosane Santos Arruda  Feminino</span>\n<span class=\"go\">2   5997     Nailde Panta  Nailde Fernandes Panta da Silva  Feminino</span>\n<span class=\"go\">..   ...              ...                              ...       ...</span>\n</code></pre></div>\n", "parameters": ["tipo", "uf", "sexo", "partido", "contendo", "excluindo", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.lista_uso_palavra", "modulename": "DadosAbertosBrasil.senado", "qualname": "lista_uso_palavra", "type": "function", "doc": "<p>Lista os tipos de uso da palavra.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ativos</strong> (bool, default=False):\nSe True, retorna apenas os tipos de uso de palavra atualmente ativos.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["ativos", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.orcamento", "modulename": "DadosAbertosBrasil.senado", "qualname": "orcamento", "type": "function", "doc": "<p>Obt\u00e9m a lista dos lotes de emendas or\u00e7ament\u00e1rias.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>autor</strong> (str, optional):\nTexto contendo nome do autor.</li>\n<li><strong>tipo</strong> (str, optional):\nTipo de or\u00e7amento.</li>\n<li><strong>ano_execucao</strong> (int, optional):\nAno que o or\u00e7amento foi executado.</li>\n<li><strong>ano_materia</strong> (int, optional):\nAno da mat\u00e9ria.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Buscar o or\u00e7amento da Lei de Diretrizes Or\u00e7ament\u00e1rias de 2020.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">orcamento</span><span class=\"p\">(</span><span class=\"n\">tipo</span><span class=\"o\">=</span><span class=\"s1\">&#39;LDO&#39;</span><span class=\"p\">,</span> <span class=\"n\">ano_execucao</span><span class=\"o\">=</span><span class=\"mi\">2020</span><span class=\"p\">)</span>\n<span class=\"go\">          autor_nome  ativo                       autor_email  autor_codigo     0          Abou Anni   True        dep.abouanni@camara.leg.br          3896</span>\n<span class=\"go\">1       Acir Gurgacz   True               acir@senador.leg.br          2633</span>\n<span class=\"go\">2    Adriana Ventura   True  dep.adrianaventura@camara.leg.br          3899</span>\n<span class=\"go\">..               ...    ...                               ...           ...</span>\n</code></pre></div>\n\n<p>Pesquisar por emendas da deputada Adriana Ventura</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">orcamento</span><span class=\"p\">(</span><span class=\"n\">autor</span><span class=\"o\">=</span><span class=\"s1\">&#39;Adriana&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">        autor_nome  ativo                       autor_email  autor_codigo     0  Adriana Ventura   True  dep.adrianaventura@camara.leg.br          3899</span>\n</code></pre></div>\n", "parameters": ["autor", "tipo", "ano_execucao", "ano_materia", "url", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador", "type": "class", "doc": "<p>Coleta os dados dos senadores.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cod</strong> (int):\nC\u00f3digo de senador que se dejesa consulta.\nO c\u00f3digo pode ser encontrado pela fun\u00e7\u00e3o <code>lista_senadores</code>.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dados</strong> (dict):\nDicion\u00e1rio completo de dados do(a) parlamentar.</li>\n<li><strong>email</strong> (str):\nE-mail do parlamentar.</li>\n<li><strong>endereco</strong> (str):\nEndere\u00e7o da sala do parlamentar no Senado Federal.</li>\n<li><strong>foto</strong> (str):\nURL para a foto do parlamentar.</li>\n<li><strong>nascimento</strong> (str):\nData de nascimento do parlamentar no formato 'AAAA-MM-DD'.</li>\n<li><strong>naturalidade</strong> (str):\nMunic\u00edpio de nascimento do parlamentar.</li>\n<li><strong>nome</strong> (str):\nNome do parlamentar.</li>\n<li><strong>nome_completo</strong> (str):\nNome completo do parlamentar.</li>\n<li><strong>pagina</strong> (str):\nWebsite do parlamentar.</li>\n<li><strong>partido</strong> (str):\nAtual partido pol\u00edtico do parlamentar.</li>\n<li><strong>sexo</strong> (str):\nSexo ('Masculino' ou 'Feminino') do parlamentar.</li>\n<li><strong>telefones</strong> (list of str):\nLista de telefones oficiais do parlamentar.</li>\n<li><strong>tratamento</strong> (str):\nPronome de tratamento usado para o parlamentar.</li>\n<li><strong>uf</strong> (str):\nUnidade Federativa pela qual o parlamentar foi eleito.</li>\n<li><strong>uf_naturalidade</strong> (str):\nUnidade Federativa de nascimento do parlamentar.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>apartes()\n    Obt\u00e9m a rela\u00e7\u00e3o de apartes do senador.\nautorias()\n    Obt\u00e9m as mat\u00e9rias de autoria de um senador.\ncargos()\n    Obt\u00e9m a rela\u00e7\u00e3o de cargos que o senador ja ocupou.\ncomissoes()\n    Obt\u00e9m as comiss\u00f5es de que um senador \u00e9 membro.\ndiscursos()\n    Obt\u00e9m a rela\u00e7\u00e3o de discursos do senador.\nfiliacoes()\n    Obt\u00e9m as filia\u00e7\u00f5es partid\u00e1rias que o senador j\u00e1 teve.\nhistorico()\n    Obt\u00e9m todos os detalhes de um parlamentar no(s) mandato(s) como\n    senador (mandato atual e anteriores, se houver).\nmandatos()\n    Obt\u00e9m os mandatos que o senador j\u00e1 teve.\nliderancas()\n    Obt\u00e9m os cargos de lideran\u00e7a de um senador.\nlicencas()\n    Obt\u00e9m os cargos de lideran\u00e7a de um senador.\nprofissoes()\n    Obt\u00e9m a(s) profiss\u00e3o(\u00f5es) de um senador.\nrelatorias()\n    Obt\u00e9m as mat\u00e9rias de relatoria de um senador.\nvotacoes()\n    Obt\u00e9m as vota\u00e7\u00f5es de um senador.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DadosAbertosBrasil._utils.errors.DAB_InputError</strong>: Quando os dados do Senador n\u00e3o forem encontrado, por qualquer que seja\no motivo.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Utilize as fun\u00e7\u00f5es <code>lista</code> para identificar o c\u00f3digo do Senado desejado.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">lista_senadores</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">lista_legislatura</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Instancie a classe <code>Senador</code> para obter as informa\u00e7\u00f5es do(a) parlamentar.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sen</span> <span class=\"o\">=</span> <span class=\"n\">senado</span><span class=\"o\">.</span><span class=\"n\">Senador</span><span class=\"p\">(</span><span class=\"n\">cod</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Ap\u00f3s a class <code>Senador</code> ser instanciada, utilize seus m\u00e9todos e atributos\npara buscar outros tipos de informa\u00e7\u00e3o sobre ele(a).</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sen</span><span class=\"o\">.</span><span class=\"n\">telefones</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sen</span><span class=\"o\">.</span><span class=\"n\">partido</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sen</span><span class=\"o\">.</span><span class=\"n\">cargos</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sen</span><span class=\"o\">.</span><span class=\"n\">votacoes</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"o\">...</span>\n</code></pre></div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n"}, {"fullname": "DadosAbertosBrasil.senado.Senador.__init__", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cod"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.apartes", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.apartes", "type": "function", "doc": "<p>Obt\u00e9m a rela\u00e7\u00e3o de apartes do senador.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>casa</strong> ({'SF', 'CD', 'CN', 'PR', 'CR', 'AC'}, optional):\nSigla da casa aonde ocorre o pronunciamento:\n<ul>\n<li>'SF' para Senado;</li>\n<li>'CD' para C\u00e2mara;</li>\n<li>'CN' para Congresso;</li>\n<li>'PR' para Presid\u00eancia;</li>\n<li>'CR' para Comiss\u00e3o Representativa do Congresso;</li>\n<li>'AC' para Assembl\u00e9ia Constituinte.</li>\n</ul></li>\n<li><strong>inicio</strong> (datetime or str, default=None):\nData inicial do per\u00edodo da pesquisa.</li>\n<li><strong>fim</strong> (datetime or str, default=None):\nData final do per\u00edodo da pesquisa.</li>\n<li><strong>numero_sessao</strong> (int, optional):\nN\u00famero da sess\u00e3o plen\u00e1ria.</li>\n<li><strong>tipo_pronunciamento</strong> (str, optional):\nSigla do tipo de pronunciamento.</li>\n<li><strong>tipo_sessao</strong> (str, optional):\nTipo da sess\u00e3o plen\u00e1ria.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "casa", "inicio", "fim", "numero_sessao", "tipo_pronunciamento", "tipo_sessao", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.autorias", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.autorias", "type": "function", "doc": "<p>Obt\u00e9m as mat\u00e9rias de autoria de um senador.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ano</strong> (int, optional):\nRetorna apenas as mat\u00e9rias do ano informado.</li>\n<li><strong>numero</strong> (int, optional):\nRetorna apenas as mat\u00e9rias do n\u00famero informado.</li>\n<li><strong>primeiro_autor</strong> (bool, optional):\n<ul>\n<li>True: Retorna apenas as mat\u00e9rias cujo senador \u00e9 o primeiro autor;</li>\n<li>False: Retorna apenas as que o senador \u00e9 coautor;</li>\n<li>None: Retorna ambas.</li>\n</ul></li>\n<li><strong>sigla</strong> (str, optional):\nRetorna apenas as mat\u00e9rias da sigla informada.</li>\n<li><strong>tramitando</strong> (bool, optional):\n<ul>\n<li>True: Retorna apenas as mat\u00e9rias que est\u00e3o tramitando;</li>\n<li>False: Retorna apenas as que n\u00e3o est\u00e3o tramitando;</li>\n<li>None: Retorna ambas.</li>\n</ul></li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "ano", "numero", "primeiro_autor", "sigla", "tramitando", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.cargos", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.cargos", "type": "function", "doc": "<p>Obt\u00e9m a rela\u00e7\u00e3o de cargos que o senador ja ocupou.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>comissao</strong> (str, optional):\nRetorna apenas os cargos da sigla de comiss\u00e3o informada.</li>\n<li><strong>ativos</strong> (bool, optional):\n<ul>\n<li>True: Retorna apenas os cargos atuais;</li>\n<li>False: Retorna apenas os cargos j\u00e1 finalizadas;</li>\n<li>None: Retorna ambos.</li>\n</ul></li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "comissao", "ativos", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.comissoes", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.comissoes", "type": "function", "doc": "<p>Obt\u00e9m as comiss\u00f5es de que um senador \u00e9 membro.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>comissao</strong> (str, optional):\nRetorna apenas as comiss\u00f5es com a sigla informada.</li>\n<li><strong>ativos</strong> (bool, optional):\n<ul>\n<li>True: Retorna apenas as comiss\u00f5es atuais;</li>\n<li>False: Retorna apenas as comiss\u00f5es j\u00e1 finalizadas;</li>\n<li>None: Retorna ambas.</li>\n</ul></li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "comissao", "ativos", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.cursos", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.cursos", "type": "function", "doc": "<p>Obt\u00e9m o hist\u00f3rico acad\u00eamico de um senador.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.discursos", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.discursos", "type": "function", "doc": "<p>Obt\u00e9m a rela\u00e7\u00e3o de discursos do senador.</p>\n\n<p>Se os argumentos <code>inicio</code> e <code>fim</code> n\u00e3o forem informados, retorna os\npronunciamentos dos \u00faltimos 30 dias.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>casa</strong> ({'SF', 'CD', 'CN', 'PR', 'CR', AC'}, optional):\nSigla da casa aonde ocorre o pronunciamento:\n<ul>\n<li>'SF' para Senado;</li>\n<li>'CD' para C\u00e2mara;</li>\n<li>'CN' para Congresso;</li>\n<li>'PR' para Presid\u00eancia;</li>\n<li>'CR' para Comiss\u00e3o Representativa do Congresso;</li>\n<li>'AC' para Assembl\u00e9ia Constituinte.</li>\n</ul></li>\n<li><strong>inicio</strong> (datetime or str, default=None):\nData inicial do per\u00edodo da pesquisa no formato 'AAAA-MM-DD'</li>\n<li><strong>fim</strong> (datetime or str, default=None):\nData final do per\u00edodo da pesquisa no formato 'AAAA-MM-DD'</li>\n<li><strong>numero_sessao</strong> (int, optional):\nN\u00famero da sess\u00e3o plen\u00e1ria.</li>\n<li><strong>tipo_pronunciamento</strong> (str, optional):\nSigla do tipo de pronunciamento.</li>\n<li><strong>tipo_sessao</strong> (str, optional):\nTipo da sess\u00e3o plen\u00e1ria.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "casa", "inicio", "fim", "numero_sessao", "tipo_pronunciamento", "tipo_sessao", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.filiacoes", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.filiacoes", "type": "function", "doc": "<p>Obt\u00e9m as filia\u00e7\u00f5es partid\u00e1rias que o senador j\u00e1 teve.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.historico", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.historico", "type": "function", "doc": "<p>Obt\u00e9m todos os detalhes de um parlamentar no(s) mandato(s) como\nsenador (mandato atual e anteriores, se houver).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Dados hist\u00f3ricos do(a) parlamentar.</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.mandatos", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.mandatos", "type": "function", "doc": "<p>Obt\u00e9m os mandatos que o senador j\u00e1 teve.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.liderancas", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.liderancas", "type": "function", "doc": "<p>Obt\u00e9m os cargos de lideran\u00e7a de um senador.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.licencas", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.licencas", "type": "function", "doc": "<p>Obt\u00e9m as licen\u00e7as de um senador.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inicio</strong> (datetime or str, default=None):\nRetorna as licen\u00e7as a partir da data especificada.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "inicio", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.profissoes", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.profissoes", "type": "function", "doc": "<p>Obt\u00e9m a(s) profiss\u00e3o(\u00f5es) de um senador.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.relatorias", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.relatorias", "type": "function", "doc": "<p>Obt\u00e9m as mat\u00e9rias de relatoria de um senador.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ano</strong> (int, optional):\nRetorna apenas as mat\u00e9rias do ano informado.</li>\n<li><strong>comissao</strong> (str, optional):\nRetorna apenas as relatorias da comiss\u00e3o informada.</li>\n<li><strong>numero</strong> (int, optional):\nRetorna apenas as mat\u00e9rias do n\u00famero informado.</li>\n<li><strong>sigla</strong> (str, optional):\nRetorna apenas as mat\u00e9rias da sigla informada.</li>\n<li><strong>tramitando</strong> (bool, optional):\n<ul>\n<li>True: Retorna apenas as mat\u00e9rias que est\u00e3o tramitando;</li>\n<li>False: Retorna apenas as que n\u00e3o est\u00e3o tramitando;</li>\n<li>None: Retorna ambas.</li>\n</ul></li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "ano", "comissao", "numero", "sigla", "tramitando", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.senado.Senador.votacoes", "modulename": "DadosAbertosBrasil.senado", "qualname": "Senador.votacoes", "type": "function", "doc": "<p>Obt\u00e9m as vota\u00e7\u00f5es de um senador.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ano</strong> (int, optional):\nRetorna apenas as mat\u00e9rias do ano informado.</li>\n<li><strong>numero</strong> (int, optional):\nRetorna apenas as mat\u00e9rias do n\u00famero informado.</li>\n<li><strong>sigla</strong> (str, optional):\nRetorna apenas as mat\u00e9rias da sigla informada.</li>\n<li><strong>tramitando</strong> (bool, optional):\n<ul>\n<li>True: Retorna apenas as mat\u00e9rias que est\u00e3o tramitando;</li>\n<li>False: Retorna apenas as que n\u00e3o est\u00e3o tramitando;</li>\n<li>None: Retorna ambas.</li>\n</ul></li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nOs dados no formato 'json' s\u00e3o mais completos, por\u00e9m alguns filtros\npodem n\u00e3o ser aplicados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Se formato = 'dataframe', retorna os dados formatados em uma tabela.</li>\n<li><strong>list of dict</strong>: Se formato = 'json', retorna os dados brutos no formato json.</li>\n</ul>\n", "parameters": ["self", "ano", "numero", "sigla", "tramitando", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf", "modulename": "DadosAbertosBrasil.uf", "qualname": "", "type": "module", "doc": "<p>Objeto UF contendo informa\u00e7\u00f5es das Unidades da Federa\u00e7\u00e3o.</p>\n\n<p>Este m\u00f3dulo \u00e9 um prot\u00f3tipo e poder\u00e1 passar por v\u00e1rias modifica\u00e7\u00f5es.</p>\n\n<p>Serve como um consolidador por UF de diversar fun\u00e7\u00f5es do pacote\nDadosAbertosBrasil.</p>\n"}, {"fullname": "DadosAbertosBrasil.uf.UF", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF", "type": "class", "doc": "<p>Consolidado de informa\u00e7\u00f5es de uma Unidade Federativa.</p>\n\n<p>Este objeto ainda \u00e9 um prot\u00f3tipo e poder\u00e1 passar por v\u00e1rias modifica\u00e7\u00f5es.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>uf</strong> (str):\nNome, sigla ou c\u00f3digo da UF desejada.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>sigla</strong> (str):\nSigla de duas letras mai\u00fasculas.</li>\n<li><strong>cod</strong> (int):\nC\u00f3digo IBGE.</li>\n<li><strong>nome</strong> (str):\nNome completo.</li>\n<li><strong>area</strong> (float):\n\u00c1rea terrotorial em quil\u00f3metros quadrados.</li>\n<li><strong>capital</strong> (str):\nCidade sede do governo estadual.</li>\n<li><strong>extinto</strong> (bool):\nTrue, caso UF tenha sido extinta (Fernando de Noronha ou Guanabara).</li>\n<li><strong>gentilico</strong> (set):\nConjunto de gent\u00edlicos e varia\u00e7\u00f5es.</li>\n<li><strong>lema</strong> (str):\nLema da UF.</li>\n<li><strong>regiao</strong> (str):\nGrande regi\u00e3o (Norte, Nordeste, Sudeste, Sul ou Centro-Oeste).</li>\n<li><strong>governador</strong> (str):\nNome do atual governador(a).</li>\n<li><strong>vice-governador</strong> (str):\nNome do atual vice-governador(a).</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>bandeira(tamanho=100)\n    Gera a URL da WikiMedia para a bandeira do estado.\nbrasao(tamanho=100)\n    Gera a URL da WikiMedia para o bras\u00e3o do estado.\ndensidade()\n    Densidade populacional (hab/km\u00b2) da UF.\ndeputados()\n    Lista dos deputados federais em exerc\u00edcio.\ngaleria()\n    Gera uma galeria de fotos da UF.\ngeojson()\n    Coordenadas dos munic\u00edpios brasileiros em formato GeoJSON.\nhistoria()\n    Objeto contendo a hist\u00f3ria da UF.\nmalha()\n    Obt\u00e9m a URL para a malha referente \u00e0 UF.\nmunicipios()\n    Lista de munic\u00edpios.\npopulacao()\n    Popula\u00e7\u00e3o projetada pelo IBGE.\nsenadores(tipo='atual', formato='dataframe')\n    Lista de senadores da rep\u00fablica desta UF.</p>\n"}, {"fullname": "DadosAbertosBrasil.uf.UF.__init__", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "uf"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf.UF.bandeira", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.bandeira", "type": "function", "doc": "<p>Gera a URL da WikiMedia para a bandeira do estado.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tamanho</strong> (int, default=100):\nTamanho em pixels da bandeira.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: URL da bandeira do estado no formato PNG.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.favoritos.bandeira\nFun\u00e7\u00e3o</code>, <code>original.</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Gera o link para a imagem da bandeira de Santa Catarina de 200 pixels.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sc</span> <span class=\"o\">=</span> <span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;sc&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">bandeira</span><span class=\"p\">(</span><span class=\"n\">tamanho</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/&#39; ...</span>\n</code></pre></div>\n", "parameters": ["self", "tamanho"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf.UF.brasao", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.brasao", "type": "function", "doc": "<p>Gera a URL da WikiMedia para o bras\u00e3o do estado.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tamanho</strong> (int, default=100):\nTamanho em pixels da bandeira.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: URL da bandeira do estado no formato PNG.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.favoritos.brasao\nFun\u00e7\u00e3o</code>, <code>original.</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Gera o link para a imagem do bras\u00e3o de Santa Catarina de 200 pixels.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sc</span> <span class=\"o\">=</span> <span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;SC&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">brasao</span><span class=\"p\">(</span><span class=\"n\">tamanho</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/&#39; ...</span>\n</code></pre></div>\n", "parameters": ["self", "tamanho"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf.UF.densidade", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.densidade", "type": "function", "doc": "<p>Densidade populacional (hab/km\u00b2) da UF.</p>\n\n<p>\u00c9 a raz\u00e3o entre a popula\u00e7\u00e3o projetada pelo IBGE (habitantes) e a \u00e1rea\nterritorial da UF (quil\u00f3metros quadrados).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Densidade populacional.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_UFError</strong>: Caso seja uma UF extinta.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.ibge.populacao\nFun\u00e7\u00e3o</code>, <code>utilizada</code>, <code>para</code>, <code>projetar</code>, <code>a</code>, <code>popula\u00e7\u00e3o</code>, <code>da</code>, <code>UF.</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">am</span> <span class=\"o\">=</span> <span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;AM&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">populacao</span><span class=\"p\">()</span>\n<span class=\"go\">2.719286132694809</span>\n</code></pre></div>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf.UF.deputados", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.deputados", "type": "function", "doc": "<p>Lista dos deputados federais da UF em exerc\u00edcio.</p>\n\n<p>Retorna uma lista de dados b\u00e1sicos sobre deputados que estiveram em\nexerc\u00edcio parlamentar em algum intervalo de tempo. Se n\u00e3o for passado um\npar\u00e2metro de tempo, como <code>legislatura</code> ou <code>inicio</code>, a lista enumerar\u00e1\nsomente os deputados em exerc\u00edcio no momento da requisi\u00e7\u00e3o.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nome</strong> (str, optional):\nParte do nome dos parlamentares.</li>\n<li><strong>legislatura</strong> (int, optional):\nN\u00famero da legislatura a qual os dados buscados devem corresponder.</li>\n<li><strong>partido</strong> (str, optional):\nSigla do partido ao qual sejam filiados os deputados.\nPara obter as siglas v\u00e1lidas, consulte a fun\u00e7\u00e3o <code>camara.lista_partidos</code>.\nAten\u00e7\u00e3o: partidos diferentes podem usar a mesma sigla em diferentes\nlegislaturas.</li>\n<li><strong>sexo</strong> ({'M', 'F'}, optional):\nLetra que designe o g\u00eanero dos parlamentares que se deseja buscar,\n<ul>\n<li>'M': Masculino;</li>\n<li>'F': Feminino.</li>\n</ul></li>\n<li><strong>inicio</strong> (str, optional):\nData de in\u00edcio de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>fim</strong> (str, optional):\nData de t\u00e9rmino de um intervalo de tempo, no formato 'AAAA-MM-DD'.</li>\n<li><strong>pagina</strong> (int, default=1):\nN\u00famero da p\u00e1gina de resultados, a partir de 1, que se deseja\nobter com a requisi\u00e7\u00e3o, contendo o n\u00famero de itens definido\npelo par\u00e2metro <code>itens</code>. Se omitido, assume o valor 1.</li>\n<li><strong>itens</strong> (int, optional):\nN\u00famero m\u00e1ximo de itens na p\u00e1gina que se deseja obter com esta\nrequisi\u00e7\u00e3o.</li>\n<li><strong>asc</strong> (bool, default=True):\nSe os registros s\u00e3o ordenados no sentido ascendente:\n<ul>\n<li>True: De A a Z ou 0 a 9 (ascendente);</li>\n<li>False: De Z a A ou 9 a 0 (descendente).</li>\n</ul></li>\n<li><strong>ordenar_por</strong> (str, default='nome'):\nQual dos elementos da representa\u00e7\u00e3o dever\u00e1 ser usado para aplicar\nordena\u00e7\u00e3o \u00e0 lista.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>id</code> como index do DataFrame.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nObs.: Alguns filtros n\u00e3o ser\u00e3o aplicados no formato 'json'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Tabela com informa\u00e7\u00f5es b\u00e1sicas dos deputados federais.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_UFError</strong>: Caso seja uma UF extinta.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.camara.lista_deputados\nFun\u00e7\u00e3o</code>, <code>original.</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rj</span> <span class=\"o\">=</span> <span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;RJ&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">deputados</span><span class=\"p\">()</span>\n</code></pre></div>\n", "parameters": ["self", "nome", "legislatura", "partido", "sexo", "inicio", "fim", "pagina", "itens", "asc", "ordenar_por", "url", "index", "formato"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf.UF.galeria", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.galeria", "type": "function", "doc": "<p>Gera uma galeria de fotos da UF.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DadosAbertosBrasil._ibge.cidades.Galeria</strong>: Objeto <code>Galeria</code> contendo uma lista de Fotografias.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.ibge.Galeria\nClasse</code>, <code>original.</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Capturar a primeira fotografia da galeria do Esp\u00edrito Santo.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">es</span> <span class=\"o\">=</span> <span class=\"n\">dab</span><span class=\"o\">.</span><span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;ES&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">galeria</span> <span class=\"o\">=</span> <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">galeria</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">foto</span> <span class=\"o\">=</span> <span class=\"n\">galeria</span><span class=\"o\">.</span><span class=\"n\">fotografias</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<p>Gerar uma URL da fotografia com altura m\u00e1xima de 500 pixels.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">foto</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"n\">altura</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;https://servicodados.ibge.gov.br/api/v1/resize/image?maxwidth=600...&#39;</span>\n</code></pre></div>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf.UF.geojson", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.geojson", "type": "function", "doc": "<p>Coordenadas dos munic\u00edpios brasileiros em formato GeoJSON.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Coordenadas em formato GeoJSON.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_UFError</strong>: Caso seja uma UF extinta.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.favoritos.geojson\nFun\u00e7\u00e3o</code>, <code>original.</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sc</span> <span class=\"o\">=</span> <span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;SC&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">geojson</span><span class=\"p\">()</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;type&#39;: &#39;FeatureCollection&#39;,</span>\n<span class=\"go\">    &#39;features&#39;: [{</span>\n<span class=\"go\">        &#39;type&#39;: &#39;Feature&#39;,</span>\n<span class=\"go\">        &#39;properties&#39;: {</span>\n<span class=\"go\">            &#39;id&#39;: &#39;4200051&#39;,</span>\n<span class=\"go\">            &#39;name&#39;: &#39;Abdon Batista&#39;,</span>\n<span class=\"go\">            &#39;description&#39;: &#39;Abdon Batista&#39;</span>\n<span class=\"go\">        },</span>\n<span class=\"go\">        &#39;geometry&#39;: {</span>\n<span class=\"go\">            &#39;type&#39;: &#39;Polygon&#39;,</span>\n<span class=\"go\">            &#39;coordinates&#39;: [[</span>\n<span class=\"go\">                [-51.0378352721, -27.5044338231],</span>\n<span class=\"go\">                [-51.0307859254, -27.5196681175],</span>\n<span class=\"go\">                [-51.0175689993, -27.5309862449],</span>\n<span class=\"go\">                [-50.9902859975, -27.5334223314],</span>\n<span class=\"go\">                [-50.9858971419, -27.5302011257],</span>\n<span class=\"go\">                ...</span>\n</code></pre></div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf.UF.historia", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.historia", "type": "function", "doc": "<p>Objeto contendo a hist\u00f3ria da UF.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DadosAbertosBrasil._ibge.cidades.Historia</strong>: Objeto <code>Historia</code> da API IBGE Cidades.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.ibge.Historia\nClasse</code>, <code>original.</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Capturar o texto da hist\u00f3ria de Minas Gerais.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mg</span> <span class=\"o\">=</span> <span class=\"n\">dab</span><span class=\"o\">.</span><span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;MG&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hist</span> <span class=\"o\">=</span> <span class=\"n\">mg</span><span class=\"o\">.</span><span class=\"n\">historia</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hist</span><span class=\"o\">.</span><span class=\"n\">historico</span>\n<span class=\"go\">&quot;O Munic\u00edpio de Wenceslau Braz tem sua origem praticamente desconh...&quot;</span>\n</code></pre></div>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf.UF.malha", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.malha", "type": "function", "doc": "<p>Obt\u00e9m a malha referente \u00e0 UF.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nivel</strong> (str, default='estados'):\nN\u00edvel geogr\u00e1fico dos dados.</li>\n<li><strong>divisoes</strong> (str, optional):\nSubdivi\u00f5es intrarregionais do n\u00edvel.\nSe None, apresenta a malha sem subdivis\u00f5es.</li>\n<li><strong>periodo</strong> (int, default=2020):\nAno da revis\u00e3o da malha.</li>\n<li><strong>formato</strong> ({'svg', 'json', 'geojson'}, default='svg'):\nFormato dos dados da malha.</li>\n<li><strong>qualidade</strong> ({'minima', 'intermediaria', 'maxima'}, default='minima'):\nQualidade de imagem da malha.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Se formato='svg', retorna a URL da malha da localidade desejada.</li>\n<li><strong>dict</strong>: Se formato='json', retorna a malha em formato TopoJSON.</li>\n<li><strong>dict</strong>: Se formato='geojson', retorna a malha em formato GeoJSON.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_LocalidadeError</strong>: Caso o n\u00edvel geogr\u00e1fico seja inv\u00e1lido.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<h6 id=\"see-also\">See also</h6>\n\n<p>DadosAbertosBrasil.ibge.malha\n    Fun\u00e7\u00e3o original</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Captura a malha do Distrito Federal (localidade=53) em formato GeoJSON.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">dab</span><span class=\"o\">.</span><span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;DF&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">malha</span><span class=\"p\">(</span><span class=\"n\">formato</span><span class=\"o\">=</span><span class=\"s1\">&#39;geojson&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;type&#39;: &#39;FeatureCollection&#39;,</span>\n<span class=\"go\">    &#39;features&#39;: [{&#39;type&#39;: &#39;Feature&#39;,</span>\n<span class=\"go\">        &#39;geometry&#39;: {&#39;type&#39;: &#39;Polygon&#39;,</span>\n<span class=\"go\">            &#39;coordinates&#39;: [[[-47.31, -16.0363], ...</span>\n</code></pre></div>\n\n<p>Captura a malha de Alagoas em formato SVG com qualidade m\u00ednima com\nsubdivis\u00f5es municipais.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">al</span> <span class=\"o\">=</span> <span class=\"n\">dab</span><span class=\"o\">.</span><span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;alagoas&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">al</span><span class=\"o\">.</span><span class=\"n\">malha</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">nivel</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;municipios&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">formato</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;svg&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">qualidade</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;minima&#39;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&#39;https://servicodados.ibge.gov.br/api/v3/malhas/...&#39;</span>\n</code></pre></div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "parameters": ["self", "nivel", "divisoes", "periodo", "formato", "qualidade"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf.UF.municipios", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.municipios", "type": "function", "doc": "<p>Lista de munic\u00edpios.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list of str</strong>: Lista de munic\u00edpios.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_UFError</strong>: Caso seja uma UF extinta.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ac</span> <span class=\"o\">=</span> <span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;AC&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ac</span><span class=\"o\">.</span><span class=\"n\">municipios</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;Acrel\u00e2ndia&#39;, &#39;Assis Brasil&#39;, &#39;Brasil\u00e9ia&#39;, &#39;Bujari&#39;, ...]</span>\n</code></pre></div>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf.UF.populacao", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.populacao", "type": "function", "doc": "<p>Popula\u00e7\u00e3o projetada pelo IBGE.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: Popula\u00e7\u00e3o projetada.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DAB_UFError</strong>: Caso seja uma UF extinta.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.ibge.populacao\nFun\u00e7\u00e3o</code>, <code>original.</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;DF&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">populacao</span><span class=\"p\">()</span>\n<span class=\"go\">3092244</span>\n</code></pre></div>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "DadosAbertosBrasil.uf.UF.senadores", "modulename": "DadosAbertosBrasil.uf", "qualname": "UF.senadores", "type": "function", "doc": "<p>Lista de senadores da rep\u00fablica desta UF.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tipo</strong> ({'atual', 'titulares', 'suplentes', 'afastados'}, default='atual'):\n<ul>\n<li>'atual': Todos os senadores em exerc\u00edcio;</li>\n<li>'titulares': Apenas senadores que iniciaram o mandato como titulares;</li>\n<li>'suplentes': Apenas senadores que iniciaram o mandato como suplentes;</li>\n<li>'afastados': Todos os senadores afastados.</li>\n</ul></li>\n<li><strong>sexo</strong> (str, optional):\nFiltro de sexo dos senadores.</li>\n<li><strong>partido</strong> (str, optional):\nFiltro de partido dos senadores.</li>\n<li><strong>contendo</strong> (str, optional):\nCaptura apenas senadores contendo esse texto no nome.</li>\n<li><strong>excluindo</strong> (str, optional):\nExclui da consulta senadores contendo esse texto no nome.</li>\n<li><strong>url</strong> (bool, default=False):\nSe False, remove as colunas contendo URI, URL e e-mails.\nEsse argumento \u00e9 ignorado se <code>formato</code> for igual a 'json'.</li>\n<li><strong>index</strong> (bool, default=False):\nSe True, define a coluna <code>codigo</code> como index do DataFrame.</li>\n<li><strong>formato</strong> ({'dataframe', 'json'}, default='dataframe'):\nFormato do dado que ser\u00e1 retornado.\nObs.: Alguns filtros n\u00e3o ser\u00e3o aplicados no formato 'json'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Tabela com informa\u00e7\u00f5es b\u00e1sicas dos senadores consultados.</li>\n<li><strong>dict</strong>: Dados brutos em formato json.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>DadosAbertosBrasil.senado.lista_senadores\nFun\u00e7\u00e3o</code>, <code>original.</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Lista senadores do partido PL do Rio de Janeiro.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rj</span> <span class=\"o\">=</span> <span class=\"n\">UF</span><span class=\"p\">(</span><span class=\"s1\">&#39;rj&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">senadores</span><span class=\"p\">(</span><span class=\"n\">partido</span><span class=\"o\">=</span><span class=\"s1\">&#39;PL&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">codigo nome_parlamentar              nome_completo       sexo         0   5936  Carlos Portinho  Carlos Francisco Portinho  Masculino</span>\n<span class=\"go\">1   5322          Rom\u00e1rio     Romario de Souza Faria  Masculino</span>\n</code></pre></div>\n", "parameters": ["self", "tipo", "sexo", "partido", "contendo", "excluindo", "url", "index", "formato"], "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.addField("qualname");
            this.addField("fullname");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();